import{B as n}from"./DPqVHIb4.js";const l=n("products",{state:()=>({products:[],categories:[],totalCount:0,loading:!1,error:null,currentProduct:null,filters:{category:null,limit:10,offset:0}}),getters:{getProductById:t=>r=>t.products.find(e=>e.id===r),getProductsByCategory:t=>r=>r?t.products.filter(e=>e.category===r):t.products,hasMoreProducts:t=>t.offset+t.limit<t.totalCount},actions:{async fetchProducts(t=null){this.loading=!0,this.error=null;try{const r=new URL("/api/products",window.location.origin);t&&r.searchParams.append("category",t),console.log("Fetching products from:",r.toString());const e=await fetch(r,{headers:{Accept:"application/json","Cache-Control":"no-cache"}});if(!e.ok)throw new Error(`API returned status: ${e.status}`);const o=await e.json();if(console.log("Response data:",o),o.success===!1){console.error("API error:",o.message),this.error=o.message||"Failed to fetch products";return}this.products=(o.data||[]).map(s=>({...s,category:s.categoryId||s.category,categoryId:s.categoryId||s.category})),console.log("Products fetched successfully:",this.products.length),await this.fetchCategories()}catch(r){console.error("Error fetching products:",r),this.error="Failed to fetch products: "+(r.message||r)}finally{this.loading=!1}},async fetchCategories(){this.loading=!0,this.error=null;try{console.log("Fetching categories");const t=await fetch("/api/products/categories",{headers:{Accept:"application/json","Cache-Control":"no-cache"}});if(!t.ok)throw new Error(`API returned status: ${t.status}`);const r=await t.json();if(console.log("Categories response:",r),r.success===!1){console.error("API error:",r.message),this.error=r.message||"Failed to fetch categories";return}Array.isArray(r.data)?this.categories=r.data.map(e=>({value:e.value||e.id||"",label:e.label||e.name||"Unnamed Category",description:e.description||""})):this.categories=[],console.log("Categories processed:",this.categories)}catch(t){console.error("Error fetching categories:",t),this.error="An unexpected error occurred: "+(t.message||t)}finally{this.loading=!1}},async fetchProductById(t){this.loading=!0,this.error=null,this.currentProduct=null;try{const r=await fetch(`/api/products/${t}`);if(!r.ok){const o=await r.json();return this.error=o.message||"Failed to fetch product",null}const e=await r.json();return this.currentProduct=e,e}catch(r){return console.error("Error fetching product:",r),this.error="An unexpected error occurred",null}finally{this.loading=!1}},async createProduct(t){this.loading=!0,this.error=null;try{const r=await fetch("/api/products",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!r.ok){const o=await r.json();return this.error=o.message||"Failed to create product",null}const e=await r.json();return this.products.unshift(e),this.totalCount++,e}catch(r){return console.error("Error creating product:",r),this.error="An unexpected error occurred",null}finally{this.loading=!1}},async updateProduct(t,r){var e;this.loading=!0,this.error=null;try{const o=await fetch(`/api/products/${t}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)});if(!o.ok){const i=await o.json();return this.error=i.message||"Failed to update product",null}const s=await o.json(),a=this.products.findIndex(i=>i.id===t);return a!==-1&&(this.products[a]=s),((e=this.currentProduct)==null?void 0:e.id)===t&&(this.currentProduct=s),s}catch(o){return console.error("Error updating product:",o),this.error="An unexpected error occurred",null}finally{this.loading=!1}},async deleteProduct(t){var r;this.loading=!0,this.error=null;try{const e=await fetch(`/api/products/${t}`,{method:"DELETE"});if(!e.ok){const o=await e.json();return this.error=o.message||"Failed to delete product",!1}return this.products=this.products.filter(o=>o.id!==t),this.totalCount--,((r=this.currentProduct)==null?void 0:r.id)===t&&(this.currentProduct=null),!0}catch(e){return console.error("Error deleting product:",e),this.error="An unexpected error occurred",!1}finally{this.loading=!1}},setFilters(t){this.filters={...this.filters,...t},"category"in t&&(this.filters.offset=0)},nextPage(){return this.filters.offset+=this.filters.limit,this.fetchProducts()},previousPage(){return this.filters.offset=Math.max(0,this.filters.offset-this.filters.limit),this.fetchProducts()},clearError(){this.error=null}}});export{l as u};
