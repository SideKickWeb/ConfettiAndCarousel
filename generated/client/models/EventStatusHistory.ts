
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `EventStatusHistory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model EventStatusHistory
 * 
 */
export type EventStatusHistoryModel = runtime.Types.Result.DefaultSelection<Prisma.$EventStatusHistoryPayload>

export type AggregateEventStatusHistory = {
  _count: EventStatusHistoryCountAggregateOutputType | null
  _min: EventStatusHistoryMinAggregateOutputType | null
  _max: EventStatusHistoryMaxAggregateOutputType | null
}

export type EventStatusHistoryMinAggregateOutputType = {
  id: string | null
  eventId: string | null
  fromStatus: string | null
  toStatus: string | null
  fromStage: string | null
  toStage: string | null
  notes: string | null
  changedBy: string | null
  changedAt: Date | null
}

export type EventStatusHistoryMaxAggregateOutputType = {
  id: string | null
  eventId: string | null
  fromStatus: string | null
  toStatus: string | null
  fromStage: string | null
  toStage: string | null
  notes: string | null
  changedBy: string | null
  changedAt: Date | null
}

export type EventStatusHistoryCountAggregateOutputType = {
  id: number
  eventId: number
  fromStatus: number
  toStatus: number
  fromStage: number
  toStage: number
  notes: number
  changedBy: number
  changedAt: number
  _all: number
}


export type EventStatusHistoryMinAggregateInputType = {
  id?: true
  eventId?: true
  fromStatus?: true
  toStatus?: true
  fromStage?: true
  toStage?: true
  notes?: true
  changedBy?: true
  changedAt?: true
}

export type EventStatusHistoryMaxAggregateInputType = {
  id?: true
  eventId?: true
  fromStatus?: true
  toStatus?: true
  fromStage?: true
  toStage?: true
  notes?: true
  changedBy?: true
  changedAt?: true
}

export type EventStatusHistoryCountAggregateInputType = {
  id?: true
  eventId?: true
  fromStatus?: true
  toStatus?: true
  fromStage?: true
  toStage?: true
  notes?: true
  changedBy?: true
  changedAt?: true
  _all?: true
}

export type EventStatusHistoryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EventStatusHistory to aggregate.
   */
  where?: Prisma.EventStatusHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EventStatusHistories to fetch.
   */
  orderBy?: Prisma.EventStatusHistoryOrderByWithRelationInput | Prisma.EventStatusHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EventStatusHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EventStatusHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EventStatusHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned EventStatusHistories
  **/
  _count?: true | EventStatusHistoryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EventStatusHistoryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EventStatusHistoryMaxAggregateInputType
}

export type GetEventStatusHistoryAggregateType<T extends EventStatusHistoryAggregateArgs> = {
      [P in keyof T & keyof AggregateEventStatusHistory]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEventStatusHistory[P]>
    : Prisma.GetScalarType<T[P], AggregateEventStatusHistory[P]>
}




export type EventStatusHistoryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EventStatusHistoryWhereInput
  orderBy?: Prisma.EventStatusHistoryOrderByWithAggregationInput | Prisma.EventStatusHistoryOrderByWithAggregationInput[]
  by: Prisma.EventStatusHistoryScalarFieldEnum[] | Prisma.EventStatusHistoryScalarFieldEnum
  having?: Prisma.EventStatusHistoryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EventStatusHistoryCountAggregateInputType | true
  _min?: EventStatusHistoryMinAggregateInputType
  _max?: EventStatusHistoryMaxAggregateInputType
}

export type EventStatusHistoryGroupByOutputType = {
  id: string
  eventId: string
  fromStatus: string | null
  toStatus: string
  fromStage: string | null
  toStage: string
  notes: string | null
  changedBy: string | null
  changedAt: Date
  _count: EventStatusHistoryCountAggregateOutputType | null
  _min: EventStatusHistoryMinAggregateOutputType | null
  _max: EventStatusHistoryMaxAggregateOutputType | null
}

type GetEventStatusHistoryGroupByPayload<T extends EventStatusHistoryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EventStatusHistoryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EventStatusHistoryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EventStatusHistoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EventStatusHistoryGroupByOutputType[P]>
      }
    >
  > 



export type EventStatusHistoryWhereInput = {
  AND?: Prisma.EventStatusHistoryWhereInput | Prisma.EventStatusHistoryWhereInput[]
  OR?: Prisma.EventStatusHistoryWhereInput[]
  NOT?: Prisma.EventStatusHistoryWhereInput | Prisma.EventStatusHistoryWhereInput[]
  id?: Prisma.StringFilter<"EventStatusHistory"> | string
  eventId?: Prisma.StringFilter<"EventStatusHistory"> | string
  fromStatus?: Prisma.StringNullableFilter<"EventStatusHistory"> | string | null
  toStatus?: Prisma.StringFilter<"EventStatusHistory"> | string
  fromStage?: Prisma.StringNullableFilter<"EventStatusHistory"> | string | null
  toStage?: Prisma.StringFilter<"EventStatusHistory"> | string
  notes?: Prisma.StringNullableFilter<"EventStatusHistory"> | string | null
  changedBy?: Prisma.StringNullableFilter<"EventStatusHistory"> | string | null
  changedAt?: Prisma.DateTimeFilter<"EventStatusHistory"> | Date | string
  Event?: Prisma.XOR<Prisma.EventScalarRelationFilter, Prisma.EventWhereInput>
}

export type EventStatusHistoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  eventId?: Prisma.SortOrder
  fromStatus?: Prisma.SortOrderInput | Prisma.SortOrder
  toStatus?: Prisma.SortOrder
  fromStage?: Prisma.SortOrderInput | Prisma.SortOrder
  toStage?: Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  changedBy?: Prisma.SortOrderInput | Prisma.SortOrder
  changedAt?: Prisma.SortOrder
  Event?: Prisma.EventOrderByWithRelationInput
}

export type EventStatusHistoryWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.EventStatusHistoryWhereInput | Prisma.EventStatusHistoryWhereInput[]
  OR?: Prisma.EventStatusHistoryWhereInput[]
  NOT?: Prisma.EventStatusHistoryWhereInput | Prisma.EventStatusHistoryWhereInput[]
  eventId?: Prisma.StringFilter<"EventStatusHistory"> | string
  fromStatus?: Prisma.StringNullableFilter<"EventStatusHistory"> | string | null
  toStatus?: Prisma.StringFilter<"EventStatusHistory"> | string
  fromStage?: Prisma.StringNullableFilter<"EventStatusHistory"> | string | null
  toStage?: Prisma.StringFilter<"EventStatusHistory"> | string
  notes?: Prisma.StringNullableFilter<"EventStatusHistory"> | string | null
  changedBy?: Prisma.StringNullableFilter<"EventStatusHistory"> | string | null
  changedAt?: Prisma.DateTimeFilter<"EventStatusHistory"> | Date | string
  Event?: Prisma.XOR<Prisma.EventScalarRelationFilter, Prisma.EventWhereInput>
}, "id">

export type EventStatusHistoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  eventId?: Prisma.SortOrder
  fromStatus?: Prisma.SortOrderInput | Prisma.SortOrder
  toStatus?: Prisma.SortOrder
  fromStage?: Prisma.SortOrderInput | Prisma.SortOrder
  toStage?: Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  changedBy?: Prisma.SortOrderInput | Prisma.SortOrder
  changedAt?: Prisma.SortOrder
  _count?: Prisma.EventStatusHistoryCountOrderByAggregateInput
  _max?: Prisma.EventStatusHistoryMaxOrderByAggregateInput
  _min?: Prisma.EventStatusHistoryMinOrderByAggregateInput
}

export type EventStatusHistoryScalarWhereWithAggregatesInput = {
  AND?: Prisma.EventStatusHistoryScalarWhereWithAggregatesInput | Prisma.EventStatusHistoryScalarWhereWithAggregatesInput[]
  OR?: Prisma.EventStatusHistoryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EventStatusHistoryScalarWhereWithAggregatesInput | Prisma.EventStatusHistoryScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"EventStatusHistory"> | string
  eventId?: Prisma.StringWithAggregatesFilter<"EventStatusHistory"> | string
  fromStatus?: Prisma.StringNullableWithAggregatesFilter<"EventStatusHistory"> | string | null
  toStatus?: Prisma.StringWithAggregatesFilter<"EventStatusHistory"> | string
  fromStage?: Prisma.StringNullableWithAggregatesFilter<"EventStatusHistory"> | string | null
  toStage?: Prisma.StringWithAggregatesFilter<"EventStatusHistory"> | string
  notes?: Prisma.StringNullableWithAggregatesFilter<"EventStatusHistory"> | string | null
  changedBy?: Prisma.StringNullableWithAggregatesFilter<"EventStatusHistory"> | string | null
  changedAt?: Prisma.DateTimeWithAggregatesFilter<"EventStatusHistory"> | Date | string
}

export type EventStatusHistoryCreateInput = {
  id: string
  fromStatus?: string | null
  toStatus: string
  fromStage?: string | null
  toStage: string
  notes?: string | null
  changedBy?: string | null
  changedAt?: Date | string
  Event: Prisma.EventCreateNestedOneWithoutEventStatusHistoryInput
}

export type EventStatusHistoryUncheckedCreateInput = {
  id: string
  eventId: string
  fromStatus?: string | null
  toStatus: string
  fromStage?: string | null
  toStage: string
  notes?: string | null
  changedBy?: string | null
  changedAt?: Date | string
}

export type EventStatusHistoryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fromStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  toStatus?: Prisma.StringFieldUpdateOperationsInput | string
  fromStage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  toStage?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Event?: Prisma.EventUpdateOneRequiredWithoutEventStatusHistoryNestedInput
}

export type EventStatusHistoryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  eventId?: Prisma.StringFieldUpdateOperationsInput | string
  fromStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  toStatus?: Prisma.StringFieldUpdateOperationsInput | string
  fromStage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  toStage?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EventStatusHistoryCreateManyInput = {
  id: string
  eventId: string
  fromStatus?: string | null
  toStatus: string
  fromStage?: string | null
  toStage: string
  notes?: string | null
  changedBy?: string | null
  changedAt?: Date | string
}

export type EventStatusHistoryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fromStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  toStatus?: Prisma.StringFieldUpdateOperationsInput | string
  fromStage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  toStage?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EventStatusHistoryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  eventId?: Prisma.StringFieldUpdateOperationsInput | string
  fromStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  toStatus?: Prisma.StringFieldUpdateOperationsInput | string
  fromStage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  toStage?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EventStatusHistoryListRelationFilter = {
  every?: Prisma.EventStatusHistoryWhereInput
  some?: Prisma.EventStatusHistoryWhereInput
  none?: Prisma.EventStatusHistoryWhereInput
}

export type EventStatusHistoryOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EventStatusHistoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  eventId?: Prisma.SortOrder
  fromStatus?: Prisma.SortOrder
  toStatus?: Prisma.SortOrder
  fromStage?: Prisma.SortOrder
  toStage?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  changedBy?: Prisma.SortOrder
  changedAt?: Prisma.SortOrder
}

export type EventStatusHistoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  eventId?: Prisma.SortOrder
  fromStatus?: Prisma.SortOrder
  toStatus?: Prisma.SortOrder
  fromStage?: Prisma.SortOrder
  toStage?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  changedBy?: Prisma.SortOrder
  changedAt?: Prisma.SortOrder
}

export type EventStatusHistoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  eventId?: Prisma.SortOrder
  fromStatus?: Prisma.SortOrder
  toStatus?: Prisma.SortOrder
  fromStage?: Prisma.SortOrder
  toStage?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  changedBy?: Prisma.SortOrder
  changedAt?: Prisma.SortOrder
}

export type EventStatusHistoryCreateNestedManyWithoutEventInput = {
  create?: Prisma.XOR<Prisma.EventStatusHistoryCreateWithoutEventInput, Prisma.EventStatusHistoryUncheckedCreateWithoutEventInput> | Prisma.EventStatusHistoryCreateWithoutEventInput[] | Prisma.EventStatusHistoryUncheckedCreateWithoutEventInput[]
  connectOrCreate?: Prisma.EventStatusHistoryCreateOrConnectWithoutEventInput | Prisma.EventStatusHistoryCreateOrConnectWithoutEventInput[]
  createMany?: Prisma.EventStatusHistoryCreateManyEventInputEnvelope
  connect?: Prisma.EventStatusHistoryWhereUniqueInput | Prisma.EventStatusHistoryWhereUniqueInput[]
}

export type EventStatusHistoryUncheckedCreateNestedManyWithoutEventInput = {
  create?: Prisma.XOR<Prisma.EventStatusHistoryCreateWithoutEventInput, Prisma.EventStatusHistoryUncheckedCreateWithoutEventInput> | Prisma.EventStatusHistoryCreateWithoutEventInput[] | Prisma.EventStatusHistoryUncheckedCreateWithoutEventInput[]
  connectOrCreate?: Prisma.EventStatusHistoryCreateOrConnectWithoutEventInput | Prisma.EventStatusHistoryCreateOrConnectWithoutEventInput[]
  createMany?: Prisma.EventStatusHistoryCreateManyEventInputEnvelope
  connect?: Prisma.EventStatusHistoryWhereUniqueInput | Prisma.EventStatusHistoryWhereUniqueInput[]
}

export type EventStatusHistoryUpdateManyWithoutEventNestedInput = {
  create?: Prisma.XOR<Prisma.EventStatusHistoryCreateWithoutEventInput, Prisma.EventStatusHistoryUncheckedCreateWithoutEventInput> | Prisma.EventStatusHistoryCreateWithoutEventInput[] | Prisma.EventStatusHistoryUncheckedCreateWithoutEventInput[]
  connectOrCreate?: Prisma.EventStatusHistoryCreateOrConnectWithoutEventInput | Prisma.EventStatusHistoryCreateOrConnectWithoutEventInput[]
  upsert?: Prisma.EventStatusHistoryUpsertWithWhereUniqueWithoutEventInput | Prisma.EventStatusHistoryUpsertWithWhereUniqueWithoutEventInput[]
  createMany?: Prisma.EventStatusHistoryCreateManyEventInputEnvelope
  set?: Prisma.EventStatusHistoryWhereUniqueInput | Prisma.EventStatusHistoryWhereUniqueInput[]
  disconnect?: Prisma.EventStatusHistoryWhereUniqueInput | Prisma.EventStatusHistoryWhereUniqueInput[]
  delete?: Prisma.EventStatusHistoryWhereUniqueInput | Prisma.EventStatusHistoryWhereUniqueInput[]
  connect?: Prisma.EventStatusHistoryWhereUniqueInput | Prisma.EventStatusHistoryWhereUniqueInput[]
  update?: Prisma.EventStatusHistoryUpdateWithWhereUniqueWithoutEventInput | Prisma.EventStatusHistoryUpdateWithWhereUniqueWithoutEventInput[]
  updateMany?: Prisma.EventStatusHistoryUpdateManyWithWhereWithoutEventInput | Prisma.EventStatusHistoryUpdateManyWithWhereWithoutEventInput[]
  deleteMany?: Prisma.EventStatusHistoryScalarWhereInput | Prisma.EventStatusHistoryScalarWhereInput[]
}

export type EventStatusHistoryUncheckedUpdateManyWithoutEventNestedInput = {
  create?: Prisma.XOR<Prisma.EventStatusHistoryCreateWithoutEventInput, Prisma.EventStatusHistoryUncheckedCreateWithoutEventInput> | Prisma.EventStatusHistoryCreateWithoutEventInput[] | Prisma.EventStatusHistoryUncheckedCreateWithoutEventInput[]
  connectOrCreate?: Prisma.EventStatusHistoryCreateOrConnectWithoutEventInput | Prisma.EventStatusHistoryCreateOrConnectWithoutEventInput[]
  upsert?: Prisma.EventStatusHistoryUpsertWithWhereUniqueWithoutEventInput | Prisma.EventStatusHistoryUpsertWithWhereUniqueWithoutEventInput[]
  createMany?: Prisma.EventStatusHistoryCreateManyEventInputEnvelope
  set?: Prisma.EventStatusHistoryWhereUniqueInput | Prisma.EventStatusHistoryWhereUniqueInput[]
  disconnect?: Prisma.EventStatusHistoryWhereUniqueInput | Prisma.EventStatusHistoryWhereUniqueInput[]
  delete?: Prisma.EventStatusHistoryWhereUniqueInput | Prisma.EventStatusHistoryWhereUniqueInput[]
  connect?: Prisma.EventStatusHistoryWhereUniqueInput | Prisma.EventStatusHistoryWhereUniqueInput[]
  update?: Prisma.EventStatusHistoryUpdateWithWhereUniqueWithoutEventInput | Prisma.EventStatusHistoryUpdateWithWhereUniqueWithoutEventInput[]
  updateMany?: Prisma.EventStatusHistoryUpdateManyWithWhereWithoutEventInput | Prisma.EventStatusHistoryUpdateManyWithWhereWithoutEventInput[]
  deleteMany?: Prisma.EventStatusHistoryScalarWhereInput | Prisma.EventStatusHistoryScalarWhereInput[]
}

export type EventStatusHistoryCreateWithoutEventInput = {
  id: string
  fromStatus?: string | null
  toStatus: string
  fromStage?: string | null
  toStage: string
  notes?: string | null
  changedBy?: string | null
  changedAt?: Date | string
}

export type EventStatusHistoryUncheckedCreateWithoutEventInput = {
  id: string
  fromStatus?: string | null
  toStatus: string
  fromStage?: string | null
  toStage: string
  notes?: string | null
  changedBy?: string | null
  changedAt?: Date | string
}

export type EventStatusHistoryCreateOrConnectWithoutEventInput = {
  where: Prisma.EventStatusHistoryWhereUniqueInput
  create: Prisma.XOR<Prisma.EventStatusHistoryCreateWithoutEventInput, Prisma.EventStatusHistoryUncheckedCreateWithoutEventInput>
}

export type EventStatusHistoryCreateManyEventInputEnvelope = {
  data: Prisma.EventStatusHistoryCreateManyEventInput | Prisma.EventStatusHistoryCreateManyEventInput[]
  skipDuplicates?: boolean
}

export type EventStatusHistoryUpsertWithWhereUniqueWithoutEventInput = {
  where: Prisma.EventStatusHistoryWhereUniqueInput
  update: Prisma.XOR<Prisma.EventStatusHistoryUpdateWithoutEventInput, Prisma.EventStatusHistoryUncheckedUpdateWithoutEventInput>
  create: Prisma.XOR<Prisma.EventStatusHistoryCreateWithoutEventInput, Prisma.EventStatusHistoryUncheckedCreateWithoutEventInput>
}

export type EventStatusHistoryUpdateWithWhereUniqueWithoutEventInput = {
  where: Prisma.EventStatusHistoryWhereUniqueInput
  data: Prisma.XOR<Prisma.EventStatusHistoryUpdateWithoutEventInput, Prisma.EventStatusHistoryUncheckedUpdateWithoutEventInput>
}

export type EventStatusHistoryUpdateManyWithWhereWithoutEventInput = {
  where: Prisma.EventStatusHistoryScalarWhereInput
  data: Prisma.XOR<Prisma.EventStatusHistoryUpdateManyMutationInput, Prisma.EventStatusHistoryUncheckedUpdateManyWithoutEventInput>
}

export type EventStatusHistoryScalarWhereInput = {
  AND?: Prisma.EventStatusHistoryScalarWhereInput | Prisma.EventStatusHistoryScalarWhereInput[]
  OR?: Prisma.EventStatusHistoryScalarWhereInput[]
  NOT?: Prisma.EventStatusHistoryScalarWhereInput | Prisma.EventStatusHistoryScalarWhereInput[]
  id?: Prisma.StringFilter<"EventStatusHistory"> | string
  eventId?: Prisma.StringFilter<"EventStatusHistory"> | string
  fromStatus?: Prisma.StringNullableFilter<"EventStatusHistory"> | string | null
  toStatus?: Prisma.StringFilter<"EventStatusHistory"> | string
  fromStage?: Prisma.StringNullableFilter<"EventStatusHistory"> | string | null
  toStage?: Prisma.StringFilter<"EventStatusHistory"> | string
  notes?: Prisma.StringNullableFilter<"EventStatusHistory"> | string | null
  changedBy?: Prisma.StringNullableFilter<"EventStatusHistory"> | string | null
  changedAt?: Prisma.DateTimeFilter<"EventStatusHistory"> | Date | string
}

export type EventStatusHistoryCreateManyEventInput = {
  id: string
  fromStatus?: string | null
  toStatus: string
  fromStage?: string | null
  toStage: string
  notes?: string | null
  changedBy?: string | null
  changedAt?: Date | string
}

export type EventStatusHistoryUpdateWithoutEventInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fromStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  toStatus?: Prisma.StringFieldUpdateOperationsInput | string
  fromStage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  toStage?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EventStatusHistoryUncheckedUpdateWithoutEventInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fromStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  toStatus?: Prisma.StringFieldUpdateOperationsInput | string
  fromStage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  toStage?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EventStatusHistoryUncheckedUpdateManyWithoutEventInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fromStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  toStatus?: Prisma.StringFieldUpdateOperationsInput | string
  fromStage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  toStage?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type EventStatusHistorySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  eventId?: boolean
  fromStatus?: boolean
  toStatus?: boolean
  fromStage?: boolean
  toStage?: boolean
  notes?: boolean
  changedBy?: boolean
  changedAt?: boolean
  Event?: boolean | Prisma.EventDefaultArgs<ExtArgs>
}, ExtArgs["result"]["eventStatusHistory"]>

export type EventStatusHistorySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  eventId?: boolean
  fromStatus?: boolean
  toStatus?: boolean
  fromStage?: boolean
  toStage?: boolean
  notes?: boolean
  changedBy?: boolean
  changedAt?: boolean
  Event?: boolean | Prisma.EventDefaultArgs<ExtArgs>
}, ExtArgs["result"]["eventStatusHistory"]>

export type EventStatusHistorySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  eventId?: boolean
  fromStatus?: boolean
  toStatus?: boolean
  fromStage?: boolean
  toStage?: boolean
  notes?: boolean
  changedBy?: boolean
  changedAt?: boolean
  Event?: boolean | Prisma.EventDefaultArgs<ExtArgs>
}, ExtArgs["result"]["eventStatusHistory"]>

export type EventStatusHistorySelectScalar = {
  id?: boolean
  eventId?: boolean
  fromStatus?: boolean
  toStatus?: boolean
  fromStage?: boolean
  toStage?: boolean
  notes?: boolean
  changedBy?: boolean
  changedAt?: boolean
}

export type EventStatusHistoryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "eventId" | "fromStatus" | "toStatus" | "fromStage" | "toStage" | "notes" | "changedBy" | "changedAt", ExtArgs["result"]["eventStatusHistory"]>
export type EventStatusHistoryInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Event?: boolean | Prisma.EventDefaultArgs<ExtArgs>
}
export type EventStatusHistoryIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Event?: boolean | Prisma.EventDefaultArgs<ExtArgs>
}
export type EventStatusHistoryIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Event?: boolean | Prisma.EventDefaultArgs<ExtArgs>
}

export type $EventStatusHistoryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "EventStatusHistory"
  objects: {
    Event: Prisma.$EventPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    eventId: string
    fromStatus: string | null
    toStatus: string
    fromStage: string | null
    toStage: string
    notes: string | null
    changedBy: string | null
    changedAt: Date
  }, ExtArgs["result"]["eventStatusHistory"]>
  composites: {}
}

export type EventStatusHistoryGetPayload<S extends boolean | null | undefined | EventStatusHistoryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EventStatusHistoryPayload, S>

export type EventStatusHistoryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EventStatusHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EventStatusHistoryCountAggregateInputType | true
  }

export interface EventStatusHistoryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventStatusHistory'], meta: { name: 'EventStatusHistory' } }
  /**
   * Find zero or one EventStatusHistory that matches the filter.
   * @param {EventStatusHistoryFindUniqueArgs} args - Arguments to find a EventStatusHistory
   * @example
   * // Get one EventStatusHistory
   * const eventStatusHistory = await prisma.eventStatusHistory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EventStatusHistoryFindUniqueArgs>(args: Prisma.SelectSubset<T, EventStatusHistoryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EventStatusHistoryClient<runtime.Types.Result.GetResult<Prisma.$EventStatusHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one EventStatusHistory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EventStatusHistoryFindUniqueOrThrowArgs} args - Arguments to find a EventStatusHistory
   * @example
   * // Get one EventStatusHistory
   * const eventStatusHistory = await prisma.eventStatusHistory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EventStatusHistoryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EventStatusHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EventStatusHistoryClient<runtime.Types.Result.GetResult<Prisma.$EventStatusHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EventStatusHistory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventStatusHistoryFindFirstArgs} args - Arguments to find a EventStatusHistory
   * @example
   * // Get one EventStatusHistory
   * const eventStatusHistory = await prisma.eventStatusHistory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EventStatusHistoryFindFirstArgs>(args?: Prisma.SelectSubset<T, EventStatusHistoryFindFirstArgs<ExtArgs>>): Prisma.Prisma__EventStatusHistoryClient<runtime.Types.Result.GetResult<Prisma.$EventStatusHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EventStatusHistory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventStatusHistoryFindFirstOrThrowArgs} args - Arguments to find a EventStatusHistory
   * @example
   * // Get one EventStatusHistory
   * const eventStatusHistory = await prisma.eventStatusHistory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EventStatusHistoryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EventStatusHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EventStatusHistoryClient<runtime.Types.Result.GetResult<Prisma.$EventStatusHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more EventStatusHistories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventStatusHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all EventStatusHistories
   * const eventStatusHistories = await prisma.eventStatusHistory.findMany()
   * 
   * // Get first 10 EventStatusHistories
   * const eventStatusHistories = await prisma.eventStatusHistory.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const eventStatusHistoryWithIdOnly = await prisma.eventStatusHistory.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EventStatusHistoryFindManyArgs>(args?: Prisma.SelectSubset<T, EventStatusHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EventStatusHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a EventStatusHistory.
   * @param {EventStatusHistoryCreateArgs} args - Arguments to create a EventStatusHistory.
   * @example
   * // Create one EventStatusHistory
   * const EventStatusHistory = await prisma.eventStatusHistory.create({
   *   data: {
   *     // ... data to create a EventStatusHistory
   *   }
   * })
   * 
   */
  create<T extends EventStatusHistoryCreateArgs>(args: Prisma.SelectSubset<T, EventStatusHistoryCreateArgs<ExtArgs>>): Prisma.Prisma__EventStatusHistoryClient<runtime.Types.Result.GetResult<Prisma.$EventStatusHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many EventStatusHistories.
   * @param {EventStatusHistoryCreateManyArgs} args - Arguments to create many EventStatusHistories.
   * @example
   * // Create many EventStatusHistories
   * const eventStatusHistory = await prisma.eventStatusHistory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EventStatusHistoryCreateManyArgs>(args?: Prisma.SelectSubset<T, EventStatusHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many EventStatusHistories and returns the data saved in the database.
   * @param {EventStatusHistoryCreateManyAndReturnArgs} args - Arguments to create many EventStatusHistories.
   * @example
   * // Create many EventStatusHistories
   * const eventStatusHistory = await prisma.eventStatusHistory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many EventStatusHistories and only return the `id`
   * const eventStatusHistoryWithIdOnly = await prisma.eventStatusHistory.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends EventStatusHistoryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, EventStatusHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EventStatusHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a EventStatusHistory.
   * @param {EventStatusHistoryDeleteArgs} args - Arguments to delete one EventStatusHistory.
   * @example
   * // Delete one EventStatusHistory
   * const EventStatusHistory = await prisma.eventStatusHistory.delete({
   *   where: {
   *     // ... filter to delete one EventStatusHistory
   *   }
   * })
   * 
   */
  delete<T extends EventStatusHistoryDeleteArgs>(args: Prisma.SelectSubset<T, EventStatusHistoryDeleteArgs<ExtArgs>>): Prisma.Prisma__EventStatusHistoryClient<runtime.Types.Result.GetResult<Prisma.$EventStatusHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one EventStatusHistory.
   * @param {EventStatusHistoryUpdateArgs} args - Arguments to update one EventStatusHistory.
   * @example
   * // Update one EventStatusHistory
   * const eventStatusHistory = await prisma.eventStatusHistory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EventStatusHistoryUpdateArgs>(args: Prisma.SelectSubset<T, EventStatusHistoryUpdateArgs<ExtArgs>>): Prisma.Prisma__EventStatusHistoryClient<runtime.Types.Result.GetResult<Prisma.$EventStatusHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more EventStatusHistories.
   * @param {EventStatusHistoryDeleteManyArgs} args - Arguments to filter EventStatusHistories to delete.
   * @example
   * // Delete a few EventStatusHistories
   * const { count } = await prisma.eventStatusHistory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EventStatusHistoryDeleteManyArgs>(args?: Prisma.SelectSubset<T, EventStatusHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EventStatusHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventStatusHistoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many EventStatusHistories
   * const eventStatusHistory = await prisma.eventStatusHistory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EventStatusHistoryUpdateManyArgs>(args: Prisma.SelectSubset<T, EventStatusHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EventStatusHistories and returns the data updated in the database.
   * @param {EventStatusHistoryUpdateManyAndReturnArgs} args - Arguments to update many EventStatusHistories.
   * @example
   * // Update many EventStatusHistories
   * const eventStatusHistory = await prisma.eventStatusHistory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more EventStatusHistories and only return the `id`
   * const eventStatusHistoryWithIdOnly = await prisma.eventStatusHistory.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends EventStatusHistoryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, EventStatusHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EventStatusHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one EventStatusHistory.
   * @param {EventStatusHistoryUpsertArgs} args - Arguments to update or create a EventStatusHistory.
   * @example
   * // Update or create a EventStatusHistory
   * const eventStatusHistory = await prisma.eventStatusHistory.upsert({
   *   create: {
   *     // ... data to create a EventStatusHistory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the EventStatusHistory we want to update
   *   }
   * })
   */
  upsert<T extends EventStatusHistoryUpsertArgs>(args: Prisma.SelectSubset<T, EventStatusHistoryUpsertArgs<ExtArgs>>): Prisma.Prisma__EventStatusHistoryClient<runtime.Types.Result.GetResult<Prisma.$EventStatusHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of EventStatusHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventStatusHistoryCountArgs} args - Arguments to filter EventStatusHistories to count.
   * @example
   * // Count the number of EventStatusHistories
   * const count = await prisma.eventStatusHistory.count({
   *   where: {
   *     // ... the filter for the EventStatusHistories we want to count
   *   }
   * })
  **/
  count<T extends EventStatusHistoryCountArgs>(
    args?: Prisma.Subset<T, EventStatusHistoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EventStatusHistoryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a EventStatusHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventStatusHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EventStatusHistoryAggregateArgs>(args: Prisma.Subset<T, EventStatusHistoryAggregateArgs>): Prisma.PrismaPromise<GetEventStatusHistoryAggregateType<T>>

  /**
   * Group by EventStatusHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventStatusHistoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EventStatusHistoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EventStatusHistoryGroupByArgs['orderBy'] }
      : { orderBy?: EventStatusHistoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EventStatusHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventStatusHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the EventStatusHistory model
 */
readonly fields: EventStatusHistoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for EventStatusHistory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EventStatusHistoryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Event<T extends Prisma.EventDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.EventDefaultArgs<ExtArgs>>): Prisma.Prisma__EventClient<runtime.Types.Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the EventStatusHistory model
 */
export interface EventStatusHistoryFieldRefs {
  readonly id: Prisma.FieldRef<"EventStatusHistory", 'String'>
  readonly eventId: Prisma.FieldRef<"EventStatusHistory", 'String'>
  readonly fromStatus: Prisma.FieldRef<"EventStatusHistory", 'String'>
  readonly toStatus: Prisma.FieldRef<"EventStatusHistory", 'String'>
  readonly fromStage: Prisma.FieldRef<"EventStatusHistory", 'String'>
  readonly toStage: Prisma.FieldRef<"EventStatusHistory", 'String'>
  readonly notes: Prisma.FieldRef<"EventStatusHistory", 'String'>
  readonly changedBy: Prisma.FieldRef<"EventStatusHistory", 'String'>
  readonly changedAt: Prisma.FieldRef<"EventStatusHistory", 'DateTime'>
}
    

// Custom InputTypes
/**
 * EventStatusHistory findUnique
 */
export type EventStatusHistoryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventStatusHistory
   */
  select?: Prisma.EventStatusHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventStatusHistory
   */
  omit?: Prisma.EventStatusHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventStatusHistoryInclude<ExtArgs> | null
  /**
   * Filter, which EventStatusHistory to fetch.
   */
  where: Prisma.EventStatusHistoryWhereUniqueInput
}

/**
 * EventStatusHistory findUniqueOrThrow
 */
export type EventStatusHistoryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventStatusHistory
   */
  select?: Prisma.EventStatusHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventStatusHistory
   */
  omit?: Prisma.EventStatusHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventStatusHistoryInclude<ExtArgs> | null
  /**
   * Filter, which EventStatusHistory to fetch.
   */
  where: Prisma.EventStatusHistoryWhereUniqueInput
}

/**
 * EventStatusHistory findFirst
 */
export type EventStatusHistoryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventStatusHistory
   */
  select?: Prisma.EventStatusHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventStatusHistory
   */
  omit?: Prisma.EventStatusHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventStatusHistoryInclude<ExtArgs> | null
  /**
   * Filter, which EventStatusHistory to fetch.
   */
  where?: Prisma.EventStatusHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EventStatusHistories to fetch.
   */
  orderBy?: Prisma.EventStatusHistoryOrderByWithRelationInput | Prisma.EventStatusHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EventStatusHistories.
   */
  cursor?: Prisma.EventStatusHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EventStatusHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EventStatusHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EventStatusHistories.
   */
  distinct?: Prisma.EventStatusHistoryScalarFieldEnum | Prisma.EventStatusHistoryScalarFieldEnum[]
}

/**
 * EventStatusHistory findFirstOrThrow
 */
export type EventStatusHistoryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventStatusHistory
   */
  select?: Prisma.EventStatusHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventStatusHistory
   */
  omit?: Prisma.EventStatusHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventStatusHistoryInclude<ExtArgs> | null
  /**
   * Filter, which EventStatusHistory to fetch.
   */
  where?: Prisma.EventStatusHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EventStatusHistories to fetch.
   */
  orderBy?: Prisma.EventStatusHistoryOrderByWithRelationInput | Prisma.EventStatusHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EventStatusHistories.
   */
  cursor?: Prisma.EventStatusHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EventStatusHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EventStatusHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EventStatusHistories.
   */
  distinct?: Prisma.EventStatusHistoryScalarFieldEnum | Prisma.EventStatusHistoryScalarFieldEnum[]
}

/**
 * EventStatusHistory findMany
 */
export type EventStatusHistoryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventStatusHistory
   */
  select?: Prisma.EventStatusHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventStatusHistory
   */
  omit?: Prisma.EventStatusHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventStatusHistoryInclude<ExtArgs> | null
  /**
   * Filter, which EventStatusHistories to fetch.
   */
  where?: Prisma.EventStatusHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EventStatusHistories to fetch.
   */
  orderBy?: Prisma.EventStatusHistoryOrderByWithRelationInput | Prisma.EventStatusHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing EventStatusHistories.
   */
  cursor?: Prisma.EventStatusHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EventStatusHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EventStatusHistories.
   */
  skip?: number
  distinct?: Prisma.EventStatusHistoryScalarFieldEnum | Prisma.EventStatusHistoryScalarFieldEnum[]
}

/**
 * EventStatusHistory create
 */
export type EventStatusHistoryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventStatusHistory
   */
  select?: Prisma.EventStatusHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventStatusHistory
   */
  omit?: Prisma.EventStatusHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventStatusHistoryInclude<ExtArgs> | null
  /**
   * The data needed to create a EventStatusHistory.
   */
  data: Prisma.XOR<Prisma.EventStatusHistoryCreateInput, Prisma.EventStatusHistoryUncheckedCreateInput>
}

/**
 * EventStatusHistory createMany
 */
export type EventStatusHistoryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many EventStatusHistories.
   */
  data: Prisma.EventStatusHistoryCreateManyInput | Prisma.EventStatusHistoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * EventStatusHistory createManyAndReturn
 */
export type EventStatusHistoryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventStatusHistory
   */
  select?: Prisma.EventStatusHistorySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EventStatusHistory
   */
  omit?: Prisma.EventStatusHistoryOmit<ExtArgs> | null
  /**
   * The data used to create many EventStatusHistories.
   */
  data: Prisma.EventStatusHistoryCreateManyInput | Prisma.EventStatusHistoryCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventStatusHistoryIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * EventStatusHistory update
 */
export type EventStatusHistoryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventStatusHistory
   */
  select?: Prisma.EventStatusHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventStatusHistory
   */
  omit?: Prisma.EventStatusHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventStatusHistoryInclude<ExtArgs> | null
  /**
   * The data needed to update a EventStatusHistory.
   */
  data: Prisma.XOR<Prisma.EventStatusHistoryUpdateInput, Prisma.EventStatusHistoryUncheckedUpdateInput>
  /**
   * Choose, which EventStatusHistory to update.
   */
  where: Prisma.EventStatusHistoryWhereUniqueInput
}

/**
 * EventStatusHistory updateMany
 */
export type EventStatusHistoryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update EventStatusHistories.
   */
  data: Prisma.XOR<Prisma.EventStatusHistoryUpdateManyMutationInput, Prisma.EventStatusHistoryUncheckedUpdateManyInput>
  /**
   * Filter which EventStatusHistories to update
   */
  where?: Prisma.EventStatusHistoryWhereInput
  /**
   * Limit how many EventStatusHistories to update.
   */
  limit?: number
}

/**
 * EventStatusHistory updateManyAndReturn
 */
export type EventStatusHistoryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventStatusHistory
   */
  select?: Prisma.EventStatusHistorySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EventStatusHistory
   */
  omit?: Prisma.EventStatusHistoryOmit<ExtArgs> | null
  /**
   * The data used to update EventStatusHistories.
   */
  data: Prisma.XOR<Prisma.EventStatusHistoryUpdateManyMutationInput, Prisma.EventStatusHistoryUncheckedUpdateManyInput>
  /**
   * Filter which EventStatusHistories to update
   */
  where?: Prisma.EventStatusHistoryWhereInput
  /**
   * Limit how many EventStatusHistories to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventStatusHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * EventStatusHistory upsert
 */
export type EventStatusHistoryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventStatusHistory
   */
  select?: Prisma.EventStatusHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventStatusHistory
   */
  omit?: Prisma.EventStatusHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventStatusHistoryInclude<ExtArgs> | null
  /**
   * The filter to search for the EventStatusHistory to update in case it exists.
   */
  where: Prisma.EventStatusHistoryWhereUniqueInput
  /**
   * In case the EventStatusHistory found by the `where` argument doesn't exist, create a new EventStatusHistory with this data.
   */
  create: Prisma.XOR<Prisma.EventStatusHistoryCreateInput, Prisma.EventStatusHistoryUncheckedCreateInput>
  /**
   * In case the EventStatusHistory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EventStatusHistoryUpdateInput, Prisma.EventStatusHistoryUncheckedUpdateInput>
}

/**
 * EventStatusHistory delete
 */
export type EventStatusHistoryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventStatusHistory
   */
  select?: Prisma.EventStatusHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventStatusHistory
   */
  omit?: Prisma.EventStatusHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventStatusHistoryInclude<ExtArgs> | null
  /**
   * Filter which EventStatusHistory to delete.
   */
  where: Prisma.EventStatusHistoryWhereUniqueInput
}

/**
 * EventStatusHistory deleteMany
 */
export type EventStatusHistoryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EventStatusHistories to delete
   */
  where?: Prisma.EventStatusHistoryWhereInput
  /**
   * Limit how many EventStatusHistories to delete.
   */
  limit?: number
}

/**
 * EventStatusHistory without action
 */
export type EventStatusHistoryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventStatusHistory
   */
  select?: Prisma.EventStatusHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventStatusHistory
   */
  omit?: Prisma.EventStatusHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventStatusHistoryInclude<ExtArgs> | null
}
