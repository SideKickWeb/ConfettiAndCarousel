
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `OrderStatusHistory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model OrderStatusHistory
 * 
 */
export type OrderStatusHistoryModel = runtime.Types.Result.DefaultSelection<Prisma.$OrderStatusHistoryPayload>

export type AggregateOrderStatusHistory = {
  _count: OrderStatusHistoryCountAggregateOutputType | null
  _min: OrderStatusHistoryMinAggregateOutputType | null
  _max: OrderStatusHistoryMaxAggregateOutputType | null
}

export type OrderStatusHistoryMinAggregateOutputType = {
  id: string | null
  orderId: string | null
  fromStatus: string | null
  toStatus: string | null
  fromStage: string | null
  toStage: string | null
  notes: string | null
  changedBy: string | null
  changedAt: Date | null
}

export type OrderStatusHistoryMaxAggregateOutputType = {
  id: string | null
  orderId: string | null
  fromStatus: string | null
  toStatus: string | null
  fromStage: string | null
  toStage: string | null
  notes: string | null
  changedBy: string | null
  changedAt: Date | null
}

export type OrderStatusHistoryCountAggregateOutputType = {
  id: number
  orderId: number
  fromStatus: number
  toStatus: number
  fromStage: number
  toStage: number
  notes: number
  changedBy: number
  changedAt: number
  _all: number
}


export type OrderStatusHistoryMinAggregateInputType = {
  id?: true
  orderId?: true
  fromStatus?: true
  toStatus?: true
  fromStage?: true
  toStage?: true
  notes?: true
  changedBy?: true
  changedAt?: true
}

export type OrderStatusHistoryMaxAggregateInputType = {
  id?: true
  orderId?: true
  fromStatus?: true
  toStatus?: true
  fromStage?: true
  toStage?: true
  notes?: true
  changedBy?: true
  changedAt?: true
}

export type OrderStatusHistoryCountAggregateInputType = {
  id?: true
  orderId?: true
  fromStatus?: true
  toStatus?: true
  fromStage?: true
  toStage?: true
  notes?: true
  changedBy?: true
  changedAt?: true
  _all?: true
}

export type OrderStatusHistoryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which OrderStatusHistory to aggregate.
   */
  where?: Prisma.OrderStatusHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OrderStatusHistories to fetch.
   */
  orderBy?: Prisma.OrderStatusHistoryOrderByWithRelationInput | Prisma.OrderStatusHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.OrderStatusHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OrderStatusHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OrderStatusHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned OrderStatusHistories
  **/
  _count?: true | OrderStatusHistoryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: OrderStatusHistoryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: OrderStatusHistoryMaxAggregateInputType
}

export type GetOrderStatusHistoryAggregateType<T extends OrderStatusHistoryAggregateArgs> = {
      [P in keyof T & keyof AggregateOrderStatusHistory]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateOrderStatusHistory[P]>
    : Prisma.GetScalarType<T[P], AggregateOrderStatusHistory[P]>
}




export type OrderStatusHistoryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OrderStatusHistoryWhereInput
  orderBy?: Prisma.OrderStatusHistoryOrderByWithAggregationInput | Prisma.OrderStatusHistoryOrderByWithAggregationInput[]
  by: Prisma.OrderStatusHistoryScalarFieldEnum[] | Prisma.OrderStatusHistoryScalarFieldEnum
  having?: Prisma.OrderStatusHistoryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: OrderStatusHistoryCountAggregateInputType | true
  _min?: OrderStatusHistoryMinAggregateInputType
  _max?: OrderStatusHistoryMaxAggregateInputType
}

export type OrderStatusHistoryGroupByOutputType = {
  id: string
  orderId: string
  fromStatus: string | null
  toStatus: string
  fromStage: string | null
  toStage: string
  notes: string | null
  changedBy: string | null
  changedAt: Date
  _count: OrderStatusHistoryCountAggregateOutputType | null
  _min: OrderStatusHistoryMinAggregateOutputType | null
  _max: OrderStatusHistoryMaxAggregateOutputType | null
}

type GetOrderStatusHistoryGroupByPayload<T extends OrderStatusHistoryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<OrderStatusHistoryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof OrderStatusHistoryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], OrderStatusHistoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], OrderStatusHistoryGroupByOutputType[P]>
      }
    >
  > 



export type OrderStatusHistoryWhereInput = {
  AND?: Prisma.OrderStatusHistoryWhereInput | Prisma.OrderStatusHistoryWhereInput[]
  OR?: Prisma.OrderStatusHistoryWhereInput[]
  NOT?: Prisma.OrderStatusHistoryWhereInput | Prisma.OrderStatusHistoryWhereInput[]
  id?: Prisma.StringFilter<"OrderStatusHistory"> | string
  orderId?: Prisma.StringFilter<"OrderStatusHistory"> | string
  fromStatus?: Prisma.StringNullableFilter<"OrderStatusHistory"> | string | null
  toStatus?: Prisma.StringFilter<"OrderStatusHistory"> | string
  fromStage?: Prisma.StringNullableFilter<"OrderStatusHistory"> | string | null
  toStage?: Prisma.StringFilter<"OrderStatusHistory"> | string
  notes?: Prisma.StringNullableFilter<"OrderStatusHistory"> | string | null
  changedBy?: Prisma.StringNullableFilter<"OrderStatusHistory"> | string | null
  changedAt?: Prisma.DateTimeFilter<"OrderStatusHistory"> | Date | string
  Order?: Prisma.XOR<Prisma.OrderScalarRelationFilter, Prisma.OrderWhereInput>
}

export type OrderStatusHistoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  orderId?: Prisma.SortOrder
  fromStatus?: Prisma.SortOrderInput | Prisma.SortOrder
  toStatus?: Prisma.SortOrder
  fromStage?: Prisma.SortOrderInput | Prisma.SortOrder
  toStage?: Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  changedBy?: Prisma.SortOrderInput | Prisma.SortOrder
  changedAt?: Prisma.SortOrder
  Order?: Prisma.OrderOrderByWithRelationInput
}

export type OrderStatusHistoryWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.OrderStatusHistoryWhereInput | Prisma.OrderStatusHistoryWhereInput[]
  OR?: Prisma.OrderStatusHistoryWhereInput[]
  NOT?: Prisma.OrderStatusHistoryWhereInput | Prisma.OrderStatusHistoryWhereInput[]
  orderId?: Prisma.StringFilter<"OrderStatusHistory"> | string
  fromStatus?: Prisma.StringNullableFilter<"OrderStatusHistory"> | string | null
  toStatus?: Prisma.StringFilter<"OrderStatusHistory"> | string
  fromStage?: Prisma.StringNullableFilter<"OrderStatusHistory"> | string | null
  toStage?: Prisma.StringFilter<"OrderStatusHistory"> | string
  notes?: Prisma.StringNullableFilter<"OrderStatusHistory"> | string | null
  changedBy?: Prisma.StringNullableFilter<"OrderStatusHistory"> | string | null
  changedAt?: Prisma.DateTimeFilter<"OrderStatusHistory"> | Date | string
  Order?: Prisma.XOR<Prisma.OrderScalarRelationFilter, Prisma.OrderWhereInput>
}, "id">

export type OrderStatusHistoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  orderId?: Prisma.SortOrder
  fromStatus?: Prisma.SortOrderInput | Prisma.SortOrder
  toStatus?: Prisma.SortOrder
  fromStage?: Prisma.SortOrderInput | Prisma.SortOrder
  toStage?: Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  changedBy?: Prisma.SortOrderInput | Prisma.SortOrder
  changedAt?: Prisma.SortOrder
  _count?: Prisma.OrderStatusHistoryCountOrderByAggregateInput
  _max?: Prisma.OrderStatusHistoryMaxOrderByAggregateInput
  _min?: Prisma.OrderStatusHistoryMinOrderByAggregateInput
}

export type OrderStatusHistoryScalarWhereWithAggregatesInput = {
  AND?: Prisma.OrderStatusHistoryScalarWhereWithAggregatesInput | Prisma.OrderStatusHistoryScalarWhereWithAggregatesInput[]
  OR?: Prisma.OrderStatusHistoryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.OrderStatusHistoryScalarWhereWithAggregatesInput | Prisma.OrderStatusHistoryScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"OrderStatusHistory"> | string
  orderId?: Prisma.StringWithAggregatesFilter<"OrderStatusHistory"> | string
  fromStatus?: Prisma.StringNullableWithAggregatesFilter<"OrderStatusHistory"> | string | null
  toStatus?: Prisma.StringWithAggregatesFilter<"OrderStatusHistory"> | string
  fromStage?: Prisma.StringNullableWithAggregatesFilter<"OrderStatusHistory"> | string | null
  toStage?: Prisma.StringWithAggregatesFilter<"OrderStatusHistory"> | string
  notes?: Prisma.StringNullableWithAggregatesFilter<"OrderStatusHistory"> | string | null
  changedBy?: Prisma.StringNullableWithAggregatesFilter<"OrderStatusHistory"> | string | null
  changedAt?: Prisma.DateTimeWithAggregatesFilter<"OrderStatusHistory"> | Date | string
}

export type OrderStatusHistoryCreateInput = {
  id: string
  fromStatus?: string | null
  toStatus: string
  fromStage?: string | null
  toStage: string
  notes?: string | null
  changedBy?: string | null
  changedAt?: Date | string
  Order: Prisma.OrderCreateNestedOneWithoutOrderStatusHistoryInput
}

export type OrderStatusHistoryUncheckedCreateInput = {
  id: string
  orderId: string
  fromStatus?: string | null
  toStatus: string
  fromStage?: string | null
  toStage: string
  notes?: string | null
  changedBy?: string | null
  changedAt?: Date | string
}

export type OrderStatusHistoryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fromStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  toStatus?: Prisma.StringFieldUpdateOperationsInput | string
  fromStage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  toStage?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Order?: Prisma.OrderUpdateOneRequiredWithoutOrderStatusHistoryNestedInput
}

export type OrderStatusHistoryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  orderId?: Prisma.StringFieldUpdateOperationsInput | string
  fromStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  toStatus?: Prisma.StringFieldUpdateOperationsInput | string
  fromStage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  toStage?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type OrderStatusHistoryCreateManyInput = {
  id: string
  orderId: string
  fromStatus?: string | null
  toStatus: string
  fromStage?: string | null
  toStage: string
  notes?: string | null
  changedBy?: string | null
  changedAt?: Date | string
}

export type OrderStatusHistoryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fromStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  toStatus?: Prisma.StringFieldUpdateOperationsInput | string
  fromStage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  toStage?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type OrderStatusHistoryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  orderId?: Prisma.StringFieldUpdateOperationsInput | string
  fromStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  toStatus?: Prisma.StringFieldUpdateOperationsInput | string
  fromStage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  toStage?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type OrderStatusHistoryListRelationFilter = {
  every?: Prisma.OrderStatusHistoryWhereInput
  some?: Prisma.OrderStatusHistoryWhereInput
  none?: Prisma.OrderStatusHistoryWhereInput
}

export type OrderStatusHistoryOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type OrderStatusHistoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  orderId?: Prisma.SortOrder
  fromStatus?: Prisma.SortOrder
  toStatus?: Prisma.SortOrder
  fromStage?: Prisma.SortOrder
  toStage?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  changedBy?: Prisma.SortOrder
  changedAt?: Prisma.SortOrder
}

export type OrderStatusHistoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  orderId?: Prisma.SortOrder
  fromStatus?: Prisma.SortOrder
  toStatus?: Prisma.SortOrder
  fromStage?: Prisma.SortOrder
  toStage?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  changedBy?: Prisma.SortOrder
  changedAt?: Prisma.SortOrder
}

export type OrderStatusHistoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  orderId?: Prisma.SortOrder
  fromStatus?: Prisma.SortOrder
  toStatus?: Prisma.SortOrder
  fromStage?: Prisma.SortOrder
  toStage?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  changedBy?: Prisma.SortOrder
  changedAt?: Prisma.SortOrder
}

export type OrderStatusHistoryCreateNestedManyWithoutOrderInput = {
  create?: Prisma.XOR<Prisma.OrderStatusHistoryCreateWithoutOrderInput, Prisma.OrderStatusHistoryUncheckedCreateWithoutOrderInput> | Prisma.OrderStatusHistoryCreateWithoutOrderInput[] | Prisma.OrderStatusHistoryUncheckedCreateWithoutOrderInput[]
  connectOrCreate?: Prisma.OrderStatusHistoryCreateOrConnectWithoutOrderInput | Prisma.OrderStatusHistoryCreateOrConnectWithoutOrderInput[]
  createMany?: Prisma.OrderStatusHistoryCreateManyOrderInputEnvelope
  connect?: Prisma.OrderStatusHistoryWhereUniqueInput | Prisma.OrderStatusHistoryWhereUniqueInput[]
}

export type OrderStatusHistoryUncheckedCreateNestedManyWithoutOrderInput = {
  create?: Prisma.XOR<Prisma.OrderStatusHistoryCreateWithoutOrderInput, Prisma.OrderStatusHistoryUncheckedCreateWithoutOrderInput> | Prisma.OrderStatusHistoryCreateWithoutOrderInput[] | Prisma.OrderStatusHistoryUncheckedCreateWithoutOrderInput[]
  connectOrCreate?: Prisma.OrderStatusHistoryCreateOrConnectWithoutOrderInput | Prisma.OrderStatusHistoryCreateOrConnectWithoutOrderInput[]
  createMany?: Prisma.OrderStatusHistoryCreateManyOrderInputEnvelope
  connect?: Prisma.OrderStatusHistoryWhereUniqueInput | Prisma.OrderStatusHistoryWhereUniqueInput[]
}

export type OrderStatusHistoryUpdateManyWithoutOrderNestedInput = {
  create?: Prisma.XOR<Prisma.OrderStatusHistoryCreateWithoutOrderInput, Prisma.OrderStatusHistoryUncheckedCreateWithoutOrderInput> | Prisma.OrderStatusHistoryCreateWithoutOrderInput[] | Prisma.OrderStatusHistoryUncheckedCreateWithoutOrderInput[]
  connectOrCreate?: Prisma.OrderStatusHistoryCreateOrConnectWithoutOrderInput | Prisma.OrderStatusHistoryCreateOrConnectWithoutOrderInput[]
  upsert?: Prisma.OrderStatusHistoryUpsertWithWhereUniqueWithoutOrderInput | Prisma.OrderStatusHistoryUpsertWithWhereUniqueWithoutOrderInput[]
  createMany?: Prisma.OrderStatusHistoryCreateManyOrderInputEnvelope
  set?: Prisma.OrderStatusHistoryWhereUniqueInput | Prisma.OrderStatusHistoryWhereUniqueInput[]
  disconnect?: Prisma.OrderStatusHistoryWhereUniqueInput | Prisma.OrderStatusHistoryWhereUniqueInput[]
  delete?: Prisma.OrderStatusHistoryWhereUniqueInput | Prisma.OrderStatusHistoryWhereUniqueInput[]
  connect?: Prisma.OrderStatusHistoryWhereUniqueInput | Prisma.OrderStatusHistoryWhereUniqueInput[]
  update?: Prisma.OrderStatusHistoryUpdateWithWhereUniqueWithoutOrderInput | Prisma.OrderStatusHistoryUpdateWithWhereUniqueWithoutOrderInput[]
  updateMany?: Prisma.OrderStatusHistoryUpdateManyWithWhereWithoutOrderInput | Prisma.OrderStatusHistoryUpdateManyWithWhereWithoutOrderInput[]
  deleteMany?: Prisma.OrderStatusHistoryScalarWhereInput | Prisma.OrderStatusHistoryScalarWhereInput[]
}

export type OrderStatusHistoryUncheckedUpdateManyWithoutOrderNestedInput = {
  create?: Prisma.XOR<Prisma.OrderStatusHistoryCreateWithoutOrderInput, Prisma.OrderStatusHistoryUncheckedCreateWithoutOrderInput> | Prisma.OrderStatusHistoryCreateWithoutOrderInput[] | Prisma.OrderStatusHistoryUncheckedCreateWithoutOrderInput[]
  connectOrCreate?: Prisma.OrderStatusHistoryCreateOrConnectWithoutOrderInput | Prisma.OrderStatusHistoryCreateOrConnectWithoutOrderInput[]
  upsert?: Prisma.OrderStatusHistoryUpsertWithWhereUniqueWithoutOrderInput | Prisma.OrderStatusHistoryUpsertWithWhereUniqueWithoutOrderInput[]
  createMany?: Prisma.OrderStatusHistoryCreateManyOrderInputEnvelope
  set?: Prisma.OrderStatusHistoryWhereUniqueInput | Prisma.OrderStatusHistoryWhereUniqueInput[]
  disconnect?: Prisma.OrderStatusHistoryWhereUniqueInput | Prisma.OrderStatusHistoryWhereUniqueInput[]
  delete?: Prisma.OrderStatusHistoryWhereUniqueInput | Prisma.OrderStatusHistoryWhereUniqueInput[]
  connect?: Prisma.OrderStatusHistoryWhereUniqueInput | Prisma.OrderStatusHistoryWhereUniqueInput[]
  update?: Prisma.OrderStatusHistoryUpdateWithWhereUniqueWithoutOrderInput | Prisma.OrderStatusHistoryUpdateWithWhereUniqueWithoutOrderInput[]
  updateMany?: Prisma.OrderStatusHistoryUpdateManyWithWhereWithoutOrderInput | Prisma.OrderStatusHistoryUpdateManyWithWhereWithoutOrderInput[]
  deleteMany?: Prisma.OrderStatusHistoryScalarWhereInput | Prisma.OrderStatusHistoryScalarWhereInput[]
}

export type OrderStatusHistoryCreateWithoutOrderInput = {
  id: string
  fromStatus?: string | null
  toStatus: string
  fromStage?: string | null
  toStage: string
  notes?: string | null
  changedBy?: string | null
  changedAt?: Date | string
}

export type OrderStatusHistoryUncheckedCreateWithoutOrderInput = {
  id: string
  fromStatus?: string | null
  toStatus: string
  fromStage?: string | null
  toStage: string
  notes?: string | null
  changedBy?: string | null
  changedAt?: Date | string
}

export type OrderStatusHistoryCreateOrConnectWithoutOrderInput = {
  where: Prisma.OrderStatusHistoryWhereUniqueInput
  create: Prisma.XOR<Prisma.OrderStatusHistoryCreateWithoutOrderInput, Prisma.OrderStatusHistoryUncheckedCreateWithoutOrderInput>
}

export type OrderStatusHistoryCreateManyOrderInputEnvelope = {
  data: Prisma.OrderStatusHistoryCreateManyOrderInput | Prisma.OrderStatusHistoryCreateManyOrderInput[]
  skipDuplicates?: boolean
}

export type OrderStatusHistoryUpsertWithWhereUniqueWithoutOrderInput = {
  where: Prisma.OrderStatusHistoryWhereUniqueInput
  update: Prisma.XOR<Prisma.OrderStatusHistoryUpdateWithoutOrderInput, Prisma.OrderStatusHistoryUncheckedUpdateWithoutOrderInput>
  create: Prisma.XOR<Prisma.OrderStatusHistoryCreateWithoutOrderInput, Prisma.OrderStatusHistoryUncheckedCreateWithoutOrderInput>
}

export type OrderStatusHistoryUpdateWithWhereUniqueWithoutOrderInput = {
  where: Prisma.OrderStatusHistoryWhereUniqueInput
  data: Prisma.XOR<Prisma.OrderStatusHistoryUpdateWithoutOrderInput, Prisma.OrderStatusHistoryUncheckedUpdateWithoutOrderInput>
}

export type OrderStatusHistoryUpdateManyWithWhereWithoutOrderInput = {
  where: Prisma.OrderStatusHistoryScalarWhereInput
  data: Prisma.XOR<Prisma.OrderStatusHistoryUpdateManyMutationInput, Prisma.OrderStatusHistoryUncheckedUpdateManyWithoutOrderInput>
}

export type OrderStatusHistoryScalarWhereInput = {
  AND?: Prisma.OrderStatusHistoryScalarWhereInput | Prisma.OrderStatusHistoryScalarWhereInput[]
  OR?: Prisma.OrderStatusHistoryScalarWhereInput[]
  NOT?: Prisma.OrderStatusHistoryScalarWhereInput | Prisma.OrderStatusHistoryScalarWhereInput[]
  id?: Prisma.StringFilter<"OrderStatusHistory"> | string
  orderId?: Prisma.StringFilter<"OrderStatusHistory"> | string
  fromStatus?: Prisma.StringNullableFilter<"OrderStatusHistory"> | string | null
  toStatus?: Prisma.StringFilter<"OrderStatusHistory"> | string
  fromStage?: Prisma.StringNullableFilter<"OrderStatusHistory"> | string | null
  toStage?: Prisma.StringFilter<"OrderStatusHistory"> | string
  notes?: Prisma.StringNullableFilter<"OrderStatusHistory"> | string | null
  changedBy?: Prisma.StringNullableFilter<"OrderStatusHistory"> | string | null
  changedAt?: Prisma.DateTimeFilter<"OrderStatusHistory"> | Date | string
}

export type OrderStatusHistoryCreateManyOrderInput = {
  id: string
  fromStatus?: string | null
  toStatus: string
  fromStage?: string | null
  toStage: string
  notes?: string | null
  changedBy?: string | null
  changedAt?: Date | string
}

export type OrderStatusHistoryUpdateWithoutOrderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fromStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  toStatus?: Prisma.StringFieldUpdateOperationsInput | string
  fromStage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  toStage?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type OrderStatusHistoryUncheckedUpdateWithoutOrderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fromStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  toStatus?: Prisma.StringFieldUpdateOperationsInput | string
  fromStage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  toStage?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type OrderStatusHistoryUncheckedUpdateManyWithoutOrderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fromStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  toStatus?: Prisma.StringFieldUpdateOperationsInput | string
  fromStage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  toStage?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type OrderStatusHistorySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  orderId?: boolean
  fromStatus?: boolean
  toStatus?: boolean
  fromStage?: boolean
  toStage?: boolean
  notes?: boolean
  changedBy?: boolean
  changedAt?: boolean
  Order?: boolean | Prisma.OrderDefaultArgs<ExtArgs>
}, ExtArgs["result"]["orderStatusHistory"]>

export type OrderStatusHistorySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  orderId?: boolean
  fromStatus?: boolean
  toStatus?: boolean
  fromStage?: boolean
  toStage?: boolean
  notes?: boolean
  changedBy?: boolean
  changedAt?: boolean
  Order?: boolean | Prisma.OrderDefaultArgs<ExtArgs>
}, ExtArgs["result"]["orderStatusHistory"]>

export type OrderStatusHistorySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  orderId?: boolean
  fromStatus?: boolean
  toStatus?: boolean
  fromStage?: boolean
  toStage?: boolean
  notes?: boolean
  changedBy?: boolean
  changedAt?: boolean
  Order?: boolean | Prisma.OrderDefaultArgs<ExtArgs>
}, ExtArgs["result"]["orderStatusHistory"]>

export type OrderStatusHistorySelectScalar = {
  id?: boolean
  orderId?: boolean
  fromStatus?: boolean
  toStatus?: boolean
  fromStage?: boolean
  toStage?: boolean
  notes?: boolean
  changedBy?: boolean
  changedAt?: boolean
}

export type OrderStatusHistoryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "orderId" | "fromStatus" | "toStatus" | "fromStage" | "toStage" | "notes" | "changedBy" | "changedAt", ExtArgs["result"]["orderStatusHistory"]>
export type OrderStatusHistoryInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Order?: boolean | Prisma.OrderDefaultArgs<ExtArgs>
}
export type OrderStatusHistoryIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Order?: boolean | Prisma.OrderDefaultArgs<ExtArgs>
}
export type OrderStatusHistoryIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Order?: boolean | Prisma.OrderDefaultArgs<ExtArgs>
}

export type $OrderStatusHistoryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "OrderStatusHistory"
  objects: {
    Order: Prisma.$OrderPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    orderId: string
    fromStatus: string | null
    toStatus: string
    fromStage: string | null
    toStage: string
    notes: string | null
    changedBy: string | null
    changedAt: Date
  }, ExtArgs["result"]["orderStatusHistory"]>
  composites: {}
}

export type OrderStatusHistoryGetPayload<S extends boolean | null | undefined | OrderStatusHistoryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$OrderStatusHistoryPayload, S>

export type OrderStatusHistoryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<OrderStatusHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: OrderStatusHistoryCountAggregateInputType | true
  }

export interface OrderStatusHistoryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderStatusHistory'], meta: { name: 'OrderStatusHistory' } }
  /**
   * Find zero or one OrderStatusHistory that matches the filter.
   * @param {OrderStatusHistoryFindUniqueArgs} args - Arguments to find a OrderStatusHistory
   * @example
   * // Get one OrderStatusHistory
   * const orderStatusHistory = await prisma.orderStatusHistory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends OrderStatusHistoryFindUniqueArgs>(args: Prisma.SelectSubset<T, OrderStatusHistoryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__OrderStatusHistoryClient<runtime.Types.Result.GetResult<Prisma.$OrderStatusHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one OrderStatusHistory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {OrderStatusHistoryFindUniqueOrThrowArgs} args - Arguments to find a OrderStatusHistory
   * @example
   * // Get one OrderStatusHistory
   * const orderStatusHistory = await prisma.orderStatusHistory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends OrderStatusHistoryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, OrderStatusHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__OrderStatusHistoryClient<runtime.Types.Result.GetResult<Prisma.$OrderStatusHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first OrderStatusHistory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderStatusHistoryFindFirstArgs} args - Arguments to find a OrderStatusHistory
   * @example
   * // Get one OrderStatusHistory
   * const orderStatusHistory = await prisma.orderStatusHistory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends OrderStatusHistoryFindFirstArgs>(args?: Prisma.SelectSubset<T, OrderStatusHistoryFindFirstArgs<ExtArgs>>): Prisma.Prisma__OrderStatusHistoryClient<runtime.Types.Result.GetResult<Prisma.$OrderStatusHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first OrderStatusHistory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderStatusHistoryFindFirstOrThrowArgs} args - Arguments to find a OrderStatusHistory
   * @example
   * // Get one OrderStatusHistory
   * const orderStatusHistory = await prisma.orderStatusHistory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends OrderStatusHistoryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, OrderStatusHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__OrderStatusHistoryClient<runtime.Types.Result.GetResult<Prisma.$OrderStatusHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more OrderStatusHistories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderStatusHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all OrderStatusHistories
   * const orderStatusHistories = await prisma.orderStatusHistory.findMany()
   * 
   * // Get first 10 OrderStatusHistories
   * const orderStatusHistories = await prisma.orderStatusHistory.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const orderStatusHistoryWithIdOnly = await prisma.orderStatusHistory.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends OrderStatusHistoryFindManyArgs>(args?: Prisma.SelectSubset<T, OrderStatusHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrderStatusHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a OrderStatusHistory.
   * @param {OrderStatusHistoryCreateArgs} args - Arguments to create a OrderStatusHistory.
   * @example
   * // Create one OrderStatusHistory
   * const OrderStatusHistory = await prisma.orderStatusHistory.create({
   *   data: {
   *     // ... data to create a OrderStatusHistory
   *   }
   * })
   * 
   */
  create<T extends OrderStatusHistoryCreateArgs>(args: Prisma.SelectSubset<T, OrderStatusHistoryCreateArgs<ExtArgs>>): Prisma.Prisma__OrderStatusHistoryClient<runtime.Types.Result.GetResult<Prisma.$OrderStatusHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many OrderStatusHistories.
   * @param {OrderStatusHistoryCreateManyArgs} args - Arguments to create many OrderStatusHistories.
   * @example
   * // Create many OrderStatusHistories
   * const orderStatusHistory = await prisma.orderStatusHistory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends OrderStatusHistoryCreateManyArgs>(args?: Prisma.SelectSubset<T, OrderStatusHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many OrderStatusHistories and returns the data saved in the database.
   * @param {OrderStatusHistoryCreateManyAndReturnArgs} args - Arguments to create many OrderStatusHistories.
   * @example
   * // Create many OrderStatusHistories
   * const orderStatusHistory = await prisma.orderStatusHistory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many OrderStatusHistories and only return the `id`
   * const orderStatusHistoryWithIdOnly = await prisma.orderStatusHistory.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends OrderStatusHistoryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, OrderStatusHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrderStatusHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a OrderStatusHistory.
   * @param {OrderStatusHistoryDeleteArgs} args - Arguments to delete one OrderStatusHistory.
   * @example
   * // Delete one OrderStatusHistory
   * const OrderStatusHistory = await prisma.orderStatusHistory.delete({
   *   where: {
   *     // ... filter to delete one OrderStatusHistory
   *   }
   * })
   * 
   */
  delete<T extends OrderStatusHistoryDeleteArgs>(args: Prisma.SelectSubset<T, OrderStatusHistoryDeleteArgs<ExtArgs>>): Prisma.Prisma__OrderStatusHistoryClient<runtime.Types.Result.GetResult<Prisma.$OrderStatusHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one OrderStatusHistory.
   * @param {OrderStatusHistoryUpdateArgs} args - Arguments to update one OrderStatusHistory.
   * @example
   * // Update one OrderStatusHistory
   * const orderStatusHistory = await prisma.orderStatusHistory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends OrderStatusHistoryUpdateArgs>(args: Prisma.SelectSubset<T, OrderStatusHistoryUpdateArgs<ExtArgs>>): Prisma.Prisma__OrderStatusHistoryClient<runtime.Types.Result.GetResult<Prisma.$OrderStatusHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more OrderStatusHistories.
   * @param {OrderStatusHistoryDeleteManyArgs} args - Arguments to filter OrderStatusHistories to delete.
   * @example
   * // Delete a few OrderStatusHistories
   * const { count } = await prisma.orderStatusHistory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends OrderStatusHistoryDeleteManyArgs>(args?: Prisma.SelectSubset<T, OrderStatusHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more OrderStatusHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderStatusHistoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many OrderStatusHistories
   * const orderStatusHistory = await prisma.orderStatusHistory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends OrderStatusHistoryUpdateManyArgs>(args: Prisma.SelectSubset<T, OrderStatusHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more OrderStatusHistories and returns the data updated in the database.
   * @param {OrderStatusHistoryUpdateManyAndReturnArgs} args - Arguments to update many OrderStatusHistories.
   * @example
   * // Update many OrderStatusHistories
   * const orderStatusHistory = await prisma.orderStatusHistory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more OrderStatusHistories and only return the `id`
   * const orderStatusHistoryWithIdOnly = await prisma.orderStatusHistory.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends OrderStatusHistoryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, OrderStatusHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrderStatusHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one OrderStatusHistory.
   * @param {OrderStatusHistoryUpsertArgs} args - Arguments to update or create a OrderStatusHistory.
   * @example
   * // Update or create a OrderStatusHistory
   * const orderStatusHistory = await prisma.orderStatusHistory.upsert({
   *   create: {
   *     // ... data to create a OrderStatusHistory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the OrderStatusHistory we want to update
   *   }
   * })
   */
  upsert<T extends OrderStatusHistoryUpsertArgs>(args: Prisma.SelectSubset<T, OrderStatusHistoryUpsertArgs<ExtArgs>>): Prisma.Prisma__OrderStatusHistoryClient<runtime.Types.Result.GetResult<Prisma.$OrderStatusHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of OrderStatusHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderStatusHistoryCountArgs} args - Arguments to filter OrderStatusHistories to count.
   * @example
   * // Count the number of OrderStatusHistories
   * const count = await prisma.orderStatusHistory.count({
   *   where: {
   *     // ... the filter for the OrderStatusHistories we want to count
   *   }
   * })
  **/
  count<T extends OrderStatusHistoryCountArgs>(
    args?: Prisma.Subset<T, OrderStatusHistoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], OrderStatusHistoryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a OrderStatusHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderStatusHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends OrderStatusHistoryAggregateArgs>(args: Prisma.Subset<T, OrderStatusHistoryAggregateArgs>): Prisma.PrismaPromise<GetOrderStatusHistoryAggregateType<T>>

  /**
   * Group by OrderStatusHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderStatusHistoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends OrderStatusHistoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: OrderStatusHistoryGroupByArgs['orderBy'] }
      : { orderBy?: OrderStatusHistoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, OrderStatusHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderStatusHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the OrderStatusHistory model
 */
readonly fields: OrderStatusHistoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for OrderStatusHistory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__OrderStatusHistoryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Order<T extends Prisma.OrderDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrderDefaultArgs<ExtArgs>>): Prisma.Prisma__OrderClient<runtime.Types.Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the OrderStatusHistory model
 */
export interface OrderStatusHistoryFieldRefs {
  readonly id: Prisma.FieldRef<"OrderStatusHistory", 'String'>
  readonly orderId: Prisma.FieldRef<"OrderStatusHistory", 'String'>
  readonly fromStatus: Prisma.FieldRef<"OrderStatusHistory", 'String'>
  readonly toStatus: Prisma.FieldRef<"OrderStatusHistory", 'String'>
  readonly fromStage: Prisma.FieldRef<"OrderStatusHistory", 'String'>
  readonly toStage: Prisma.FieldRef<"OrderStatusHistory", 'String'>
  readonly notes: Prisma.FieldRef<"OrderStatusHistory", 'String'>
  readonly changedBy: Prisma.FieldRef<"OrderStatusHistory", 'String'>
  readonly changedAt: Prisma.FieldRef<"OrderStatusHistory", 'DateTime'>
}
    

// Custom InputTypes
/**
 * OrderStatusHistory findUnique
 */
export type OrderStatusHistoryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderStatusHistory
   */
  select?: Prisma.OrderStatusHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderStatusHistory
   */
  omit?: Prisma.OrderStatusHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderStatusHistoryInclude<ExtArgs> | null
  /**
   * Filter, which OrderStatusHistory to fetch.
   */
  where: Prisma.OrderStatusHistoryWhereUniqueInput
}

/**
 * OrderStatusHistory findUniqueOrThrow
 */
export type OrderStatusHistoryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderStatusHistory
   */
  select?: Prisma.OrderStatusHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderStatusHistory
   */
  omit?: Prisma.OrderStatusHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderStatusHistoryInclude<ExtArgs> | null
  /**
   * Filter, which OrderStatusHistory to fetch.
   */
  where: Prisma.OrderStatusHistoryWhereUniqueInput
}

/**
 * OrderStatusHistory findFirst
 */
export type OrderStatusHistoryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderStatusHistory
   */
  select?: Prisma.OrderStatusHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderStatusHistory
   */
  omit?: Prisma.OrderStatusHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderStatusHistoryInclude<ExtArgs> | null
  /**
   * Filter, which OrderStatusHistory to fetch.
   */
  where?: Prisma.OrderStatusHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OrderStatusHistories to fetch.
   */
  orderBy?: Prisma.OrderStatusHistoryOrderByWithRelationInput | Prisma.OrderStatusHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for OrderStatusHistories.
   */
  cursor?: Prisma.OrderStatusHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OrderStatusHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OrderStatusHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of OrderStatusHistories.
   */
  distinct?: Prisma.OrderStatusHistoryScalarFieldEnum | Prisma.OrderStatusHistoryScalarFieldEnum[]
}

/**
 * OrderStatusHistory findFirstOrThrow
 */
export type OrderStatusHistoryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderStatusHistory
   */
  select?: Prisma.OrderStatusHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderStatusHistory
   */
  omit?: Prisma.OrderStatusHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderStatusHistoryInclude<ExtArgs> | null
  /**
   * Filter, which OrderStatusHistory to fetch.
   */
  where?: Prisma.OrderStatusHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OrderStatusHistories to fetch.
   */
  orderBy?: Prisma.OrderStatusHistoryOrderByWithRelationInput | Prisma.OrderStatusHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for OrderStatusHistories.
   */
  cursor?: Prisma.OrderStatusHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OrderStatusHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OrderStatusHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of OrderStatusHistories.
   */
  distinct?: Prisma.OrderStatusHistoryScalarFieldEnum | Prisma.OrderStatusHistoryScalarFieldEnum[]
}

/**
 * OrderStatusHistory findMany
 */
export type OrderStatusHistoryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderStatusHistory
   */
  select?: Prisma.OrderStatusHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderStatusHistory
   */
  omit?: Prisma.OrderStatusHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderStatusHistoryInclude<ExtArgs> | null
  /**
   * Filter, which OrderStatusHistories to fetch.
   */
  where?: Prisma.OrderStatusHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OrderStatusHistories to fetch.
   */
  orderBy?: Prisma.OrderStatusHistoryOrderByWithRelationInput | Prisma.OrderStatusHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing OrderStatusHistories.
   */
  cursor?: Prisma.OrderStatusHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OrderStatusHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OrderStatusHistories.
   */
  skip?: number
  distinct?: Prisma.OrderStatusHistoryScalarFieldEnum | Prisma.OrderStatusHistoryScalarFieldEnum[]
}

/**
 * OrderStatusHistory create
 */
export type OrderStatusHistoryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderStatusHistory
   */
  select?: Prisma.OrderStatusHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderStatusHistory
   */
  omit?: Prisma.OrderStatusHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderStatusHistoryInclude<ExtArgs> | null
  /**
   * The data needed to create a OrderStatusHistory.
   */
  data: Prisma.XOR<Prisma.OrderStatusHistoryCreateInput, Prisma.OrderStatusHistoryUncheckedCreateInput>
}

/**
 * OrderStatusHistory createMany
 */
export type OrderStatusHistoryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many OrderStatusHistories.
   */
  data: Prisma.OrderStatusHistoryCreateManyInput | Prisma.OrderStatusHistoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * OrderStatusHistory createManyAndReturn
 */
export type OrderStatusHistoryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderStatusHistory
   */
  select?: Prisma.OrderStatusHistorySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the OrderStatusHistory
   */
  omit?: Prisma.OrderStatusHistoryOmit<ExtArgs> | null
  /**
   * The data used to create many OrderStatusHistories.
   */
  data: Prisma.OrderStatusHistoryCreateManyInput | Prisma.OrderStatusHistoryCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderStatusHistoryIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * OrderStatusHistory update
 */
export type OrderStatusHistoryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderStatusHistory
   */
  select?: Prisma.OrderStatusHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderStatusHistory
   */
  omit?: Prisma.OrderStatusHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderStatusHistoryInclude<ExtArgs> | null
  /**
   * The data needed to update a OrderStatusHistory.
   */
  data: Prisma.XOR<Prisma.OrderStatusHistoryUpdateInput, Prisma.OrderStatusHistoryUncheckedUpdateInput>
  /**
   * Choose, which OrderStatusHistory to update.
   */
  where: Prisma.OrderStatusHistoryWhereUniqueInput
}

/**
 * OrderStatusHistory updateMany
 */
export type OrderStatusHistoryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update OrderStatusHistories.
   */
  data: Prisma.XOR<Prisma.OrderStatusHistoryUpdateManyMutationInput, Prisma.OrderStatusHistoryUncheckedUpdateManyInput>
  /**
   * Filter which OrderStatusHistories to update
   */
  where?: Prisma.OrderStatusHistoryWhereInput
  /**
   * Limit how many OrderStatusHistories to update.
   */
  limit?: number
}

/**
 * OrderStatusHistory updateManyAndReturn
 */
export type OrderStatusHistoryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderStatusHistory
   */
  select?: Prisma.OrderStatusHistorySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the OrderStatusHistory
   */
  omit?: Prisma.OrderStatusHistoryOmit<ExtArgs> | null
  /**
   * The data used to update OrderStatusHistories.
   */
  data: Prisma.XOR<Prisma.OrderStatusHistoryUpdateManyMutationInput, Prisma.OrderStatusHistoryUncheckedUpdateManyInput>
  /**
   * Filter which OrderStatusHistories to update
   */
  where?: Prisma.OrderStatusHistoryWhereInput
  /**
   * Limit how many OrderStatusHistories to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderStatusHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * OrderStatusHistory upsert
 */
export type OrderStatusHistoryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderStatusHistory
   */
  select?: Prisma.OrderStatusHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderStatusHistory
   */
  omit?: Prisma.OrderStatusHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderStatusHistoryInclude<ExtArgs> | null
  /**
   * The filter to search for the OrderStatusHistory to update in case it exists.
   */
  where: Prisma.OrderStatusHistoryWhereUniqueInput
  /**
   * In case the OrderStatusHistory found by the `where` argument doesn't exist, create a new OrderStatusHistory with this data.
   */
  create: Prisma.XOR<Prisma.OrderStatusHistoryCreateInput, Prisma.OrderStatusHistoryUncheckedCreateInput>
  /**
   * In case the OrderStatusHistory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.OrderStatusHistoryUpdateInput, Prisma.OrderStatusHistoryUncheckedUpdateInput>
}

/**
 * OrderStatusHistory delete
 */
export type OrderStatusHistoryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderStatusHistory
   */
  select?: Prisma.OrderStatusHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderStatusHistory
   */
  omit?: Prisma.OrderStatusHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderStatusHistoryInclude<ExtArgs> | null
  /**
   * Filter which OrderStatusHistory to delete.
   */
  where: Prisma.OrderStatusHistoryWhereUniqueInput
}

/**
 * OrderStatusHistory deleteMany
 */
export type OrderStatusHistoryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which OrderStatusHistories to delete
   */
  where?: Prisma.OrderStatusHistoryWhereInput
  /**
   * Limit how many OrderStatusHistories to delete.
   */
  limit?: number
}

/**
 * OrderStatusHistory without action
 */
export type OrderStatusHistoryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderStatusHistory
   */
  select?: Prisma.OrderStatusHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderStatusHistory
   */
  omit?: Prisma.OrderStatusHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderStatusHistoryInclude<ExtArgs> | null
}
