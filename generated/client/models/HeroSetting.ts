
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `HeroSetting` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model HeroSetting
 * 
 */
export type HeroSettingModel = runtime.Types.Result.DefaultSelection<Prisma.$HeroSettingPayload>

export type AggregateHeroSetting = {
  _count: HeroSettingCountAggregateOutputType | null
  _min: HeroSettingMinAggregateOutputType | null
  _max: HeroSettingMaxAggregateOutputType | null
}

export type HeroSettingMinAggregateOutputType = {
  id: string | null
  imageUrl: string | null
  title: string | null
  description: string | null
  buttonText: string | null
  buttonLink: string | null
  textPosition: string | null
  active: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type HeroSettingMaxAggregateOutputType = {
  id: string | null
  imageUrl: string | null
  title: string | null
  description: string | null
  buttonText: string | null
  buttonLink: string | null
  textPosition: string | null
  active: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type HeroSettingCountAggregateOutputType = {
  id: number
  imageUrl: number
  title: number
  description: number
  buttonText: number
  buttonLink: number
  textPosition: number
  active: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type HeroSettingMinAggregateInputType = {
  id?: true
  imageUrl?: true
  title?: true
  description?: true
  buttonText?: true
  buttonLink?: true
  textPosition?: true
  active?: true
  createdAt?: true
  updatedAt?: true
}

export type HeroSettingMaxAggregateInputType = {
  id?: true
  imageUrl?: true
  title?: true
  description?: true
  buttonText?: true
  buttonLink?: true
  textPosition?: true
  active?: true
  createdAt?: true
  updatedAt?: true
}

export type HeroSettingCountAggregateInputType = {
  id?: true
  imageUrl?: true
  title?: true
  description?: true
  buttonText?: true
  buttonLink?: true
  textPosition?: true
  active?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type HeroSettingAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which HeroSetting to aggregate.
   */
  where?: Prisma.HeroSettingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of HeroSettings to fetch.
   */
  orderBy?: Prisma.HeroSettingOrderByWithRelationInput | Prisma.HeroSettingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.HeroSettingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` HeroSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` HeroSettings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned HeroSettings
  **/
  _count?: true | HeroSettingCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: HeroSettingMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: HeroSettingMaxAggregateInputType
}

export type GetHeroSettingAggregateType<T extends HeroSettingAggregateArgs> = {
      [P in keyof T & keyof AggregateHeroSetting]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateHeroSetting[P]>
    : Prisma.GetScalarType<T[P], AggregateHeroSetting[P]>
}




export type HeroSettingGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.HeroSettingWhereInput
  orderBy?: Prisma.HeroSettingOrderByWithAggregationInput | Prisma.HeroSettingOrderByWithAggregationInput[]
  by: Prisma.HeroSettingScalarFieldEnum[] | Prisma.HeroSettingScalarFieldEnum
  having?: Prisma.HeroSettingScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: HeroSettingCountAggregateInputType | true
  _min?: HeroSettingMinAggregateInputType
  _max?: HeroSettingMaxAggregateInputType
}

export type HeroSettingGroupByOutputType = {
  id: string
  imageUrl: string
  title: string
  description: string
  buttonText: string
  buttonLink: string
  textPosition: string
  active: boolean
  createdAt: Date
  updatedAt: Date
  _count: HeroSettingCountAggregateOutputType | null
  _min: HeroSettingMinAggregateOutputType | null
  _max: HeroSettingMaxAggregateOutputType | null
}

type GetHeroSettingGroupByPayload<T extends HeroSettingGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<HeroSettingGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof HeroSettingGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], HeroSettingGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], HeroSettingGroupByOutputType[P]>
      }
    >
  > 



export type HeroSettingWhereInput = {
  AND?: Prisma.HeroSettingWhereInput | Prisma.HeroSettingWhereInput[]
  OR?: Prisma.HeroSettingWhereInput[]
  NOT?: Prisma.HeroSettingWhereInput | Prisma.HeroSettingWhereInput[]
  id?: Prisma.StringFilter<"HeroSetting"> | string
  imageUrl?: Prisma.StringFilter<"HeroSetting"> | string
  title?: Prisma.StringFilter<"HeroSetting"> | string
  description?: Prisma.StringFilter<"HeroSetting"> | string
  buttonText?: Prisma.StringFilter<"HeroSetting"> | string
  buttonLink?: Prisma.StringFilter<"HeroSetting"> | string
  textPosition?: Prisma.StringFilter<"HeroSetting"> | string
  active?: Prisma.BoolFilter<"HeroSetting"> | boolean
  createdAt?: Prisma.DateTimeFilter<"HeroSetting"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"HeroSetting"> | Date | string
}

export type HeroSettingOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  buttonText?: Prisma.SortOrder
  buttonLink?: Prisma.SortOrder
  textPosition?: Prisma.SortOrder
  active?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type HeroSettingWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.HeroSettingWhereInput | Prisma.HeroSettingWhereInput[]
  OR?: Prisma.HeroSettingWhereInput[]
  NOT?: Prisma.HeroSettingWhereInput | Prisma.HeroSettingWhereInput[]
  imageUrl?: Prisma.StringFilter<"HeroSetting"> | string
  title?: Prisma.StringFilter<"HeroSetting"> | string
  description?: Prisma.StringFilter<"HeroSetting"> | string
  buttonText?: Prisma.StringFilter<"HeroSetting"> | string
  buttonLink?: Prisma.StringFilter<"HeroSetting"> | string
  textPosition?: Prisma.StringFilter<"HeroSetting"> | string
  active?: Prisma.BoolFilter<"HeroSetting"> | boolean
  createdAt?: Prisma.DateTimeFilter<"HeroSetting"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"HeroSetting"> | Date | string
}, "id">

export type HeroSettingOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  buttonText?: Prisma.SortOrder
  buttonLink?: Prisma.SortOrder
  textPosition?: Prisma.SortOrder
  active?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.HeroSettingCountOrderByAggregateInput
  _max?: Prisma.HeroSettingMaxOrderByAggregateInput
  _min?: Prisma.HeroSettingMinOrderByAggregateInput
}

export type HeroSettingScalarWhereWithAggregatesInput = {
  AND?: Prisma.HeroSettingScalarWhereWithAggregatesInput | Prisma.HeroSettingScalarWhereWithAggregatesInput[]
  OR?: Prisma.HeroSettingScalarWhereWithAggregatesInput[]
  NOT?: Prisma.HeroSettingScalarWhereWithAggregatesInput | Prisma.HeroSettingScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"HeroSetting"> | string
  imageUrl?: Prisma.StringWithAggregatesFilter<"HeroSetting"> | string
  title?: Prisma.StringWithAggregatesFilter<"HeroSetting"> | string
  description?: Prisma.StringWithAggregatesFilter<"HeroSetting"> | string
  buttonText?: Prisma.StringWithAggregatesFilter<"HeroSetting"> | string
  buttonLink?: Prisma.StringWithAggregatesFilter<"HeroSetting"> | string
  textPosition?: Prisma.StringWithAggregatesFilter<"HeroSetting"> | string
  active?: Prisma.BoolWithAggregatesFilter<"HeroSetting"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"HeroSetting"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"HeroSetting"> | Date | string
}

export type HeroSettingCreateInput = {
  id?: string
  imageUrl: string
  title: string
  description: string
  buttonText?: string
  buttonLink?: string
  textPosition?: string
  active?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type HeroSettingUncheckedCreateInput = {
  id?: string
  imageUrl: string
  title: string
  description: string
  buttonText?: string
  buttonLink?: string
  textPosition?: string
  active?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type HeroSettingUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  imageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  buttonText?: Prisma.StringFieldUpdateOperationsInput | string
  buttonLink?: Prisma.StringFieldUpdateOperationsInput | string
  textPosition?: Prisma.StringFieldUpdateOperationsInput | string
  active?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type HeroSettingUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  imageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  buttonText?: Prisma.StringFieldUpdateOperationsInput | string
  buttonLink?: Prisma.StringFieldUpdateOperationsInput | string
  textPosition?: Prisma.StringFieldUpdateOperationsInput | string
  active?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type HeroSettingCreateManyInput = {
  id?: string
  imageUrl: string
  title: string
  description: string
  buttonText?: string
  buttonLink?: string
  textPosition?: string
  active?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type HeroSettingUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  imageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  buttonText?: Prisma.StringFieldUpdateOperationsInput | string
  buttonLink?: Prisma.StringFieldUpdateOperationsInput | string
  textPosition?: Prisma.StringFieldUpdateOperationsInput | string
  active?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type HeroSettingUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  imageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  buttonText?: Prisma.StringFieldUpdateOperationsInput | string
  buttonLink?: Prisma.StringFieldUpdateOperationsInput | string
  textPosition?: Prisma.StringFieldUpdateOperationsInput | string
  active?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type HeroSettingCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  buttonText?: Prisma.SortOrder
  buttonLink?: Prisma.SortOrder
  textPosition?: Prisma.SortOrder
  active?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type HeroSettingMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  buttonText?: Prisma.SortOrder
  buttonLink?: Prisma.SortOrder
  textPosition?: Prisma.SortOrder
  active?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type HeroSettingMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  buttonText?: Prisma.SortOrder
  buttonLink?: Prisma.SortOrder
  textPosition?: Prisma.SortOrder
  active?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}



export type HeroSettingSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  imageUrl?: boolean
  title?: boolean
  description?: boolean
  buttonText?: boolean
  buttonLink?: boolean
  textPosition?: boolean
  active?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["heroSetting"]>

export type HeroSettingSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  imageUrl?: boolean
  title?: boolean
  description?: boolean
  buttonText?: boolean
  buttonLink?: boolean
  textPosition?: boolean
  active?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["heroSetting"]>

export type HeroSettingSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  imageUrl?: boolean
  title?: boolean
  description?: boolean
  buttonText?: boolean
  buttonLink?: boolean
  textPosition?: boolean
  active?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["heroSetting"]>

export type HeroSettingSelectScalar = {
  id?: boolean
  imageUrl?: boolean
  title?: boolean
  description?: boolean
  buttonText?: boolean
  buttonLink?: boolean
  textPosition?: boolean
  active?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type HeroSettingOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "imageUrl" | "title" | "description" | "buttonText" | "buttonLink" | "textPosition" | "active" | "createdAt" | "updatedAt", ExtArgs["result"]["heroSetting"]>

export type $HeroSettingPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "HeroSetting"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    imageUrl: string
    title: string
    description: string
    buttonText: string
    buttonLink: string
    textPosition: string
    active: boolean
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["heroSetting"]>
  composites: {}
}

export type HeroSettingGetPayload<S extends boolean | null | undefined | HeroSettingDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$HeroSettingPayload, S>

export type HeroSettingCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<HeroSettingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: HeroSettingCountAggregateInputType | true
  }

export interface HeroSettingDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HeroSetting'], meta: { name: 'HeroSetting' } }
  /**
   * Find zero or one HeroSetting that matches the filter.
   * @param {HeroSettingFindUniqueArgs} args - Arguments to find a HeroSetting
   * @example
   * // Get one HeroSetting
   * const heroSetting = await prisma.heroSetting.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends HeroSettingFindUniqueArgs>(args: Prisma.SelectSubset<T, HeroSettingFindUniqueArgs<ExtArgs>>): Prisma.Prisma__HeroSettingClient<runtime.Types.Result.GetResult<Prisma.$HeroSettingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one HeroSetting that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {HeroSettingFindUniqueOrThrowArgs} args - Arguments to find a HeroSetting
   * @example
   * // Get one HeroSetting
   * const heroSetting = await prisma.heroSetting.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends HeroSettingFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, HeroSettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__HeroSettingClient<runtime.Types.Result.GetResult<Prisma.$HeroSettingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first HeroSetting that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HeroSettingFindFirstArgs} args - Arguments to find a HeroSetting
   * @example
   * // Get one HeroSetting
   * const heroSetting = await prisma.heroSetting.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends HeroSettingFindFirstArgs>(args?: Prisma.SelectSubset<T, HeroSettingFindFirstArgs<ExtArgs>>): Prisma.Prisma__HeroSettingClient<runtime.Types.Result.GetResult<Prisma.$HeroSettingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first HeroSetting that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HeroSettingFindFirstOrThrowArgs} args - Arguments to find a HeroSetting
   * @example
   * // Get one HeroSetting
   * const heroSetting = await prisma.heroSetting.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends HeroSettingFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, HeroSettingFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__HeroSettingClient<runtime.Types.Result.GetResult<Prisma.$HeroSettingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more HeroSettings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HeroSettingFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all HeroSettings
   * const heroSettings = await prisma.heroSetting.findMany()
   * 
   * // Get first 10 HeroSettings
   * const heroSettings = await prisma.heroSetting.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const heroSettingWithIdOnly = await prisma.heroSetting.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends HeroSettingFindManyArgs>(args?: Prisma.SelectSubset<T, HeroSettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$HeroSettingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a HeroSetting.
   * @param {HeroSettingCreateArgs} args - Arguments to create a HeroSetting.
   * @example
   * // Create one HeroSetting
   * const HeroSetting = await prisma.heroSetting.create({
   *   data: {
   *     // ... data to create a HeroSetting
   *   }
   * })
   * 
   */
  create<T extends HeroSettingCreateArgs>(args: Prisma.SelectSubset<T, HeroSettingCreateArgs<ExtArgs>>): Prisma.Prisma__HeroSettingClient<runtime.Types.Result.GetResult<Prisma.$HeroSettingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many HeroSettings.
   * @param {HeroSettingCreateManyArgs} args - Arguments to create many HeroSettings.
   * @example
   * // Create many HeroSettings
   * const heroSetting = await prisma.heroSetting.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends HeroSettingCreateManyArgs>(args?: Prisma.SelectSubset<T, HeroSettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many HeroSettings and returns the data saved in the database.
   * @param {HeroSettingCreateManyAndReturnArgs} args - Arguments to create many HeroSettings.
   * @example
   * // Create many HeroSettings
   * const heroSetting = await prisma.heroSetting.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many HeroSettings and only return the `id`
   * const heroSettingWithIdOnly = await prisma.heroSetting.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends HeroSettingCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, HeroSettingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$HeroSettingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a HeroSetting.
   * @param {HeroSettingDeleteArgs} args - Arguments to delete one HeroSetting.
   * @example
   * // Delete one HeroSetting
   * const HeroSetting = await prisma.heroSetting.delete({
   *   where: {
   *     // ... filter to delete one HeroSetting
   *   }
   * })
   * 
   */
  delete<T extends HeroSettingDeleteArgs>(args: Prisma.SelectSubset<T, HeroSettingDeleteArgs<ExtArgs>>): Prisma.Prisma__HeroSettingClient<runtime.Types.Result.GetResult<Prisma.$HeroSettingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one HeroSetting.
   * @param {HeroSettingUpdateArgs} args - Arguments to update one HeroSetting.
   * @example
   * // Update one HeroSetting
   * const heroSetting = await prisma.heroSetting.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends HeroSettingUpdateArgs>(args: Prisma.SelectSubset<T, HeroSettingUpdateArgs<ExtArgs>>): Prisma.Prisma__HeroSettingClient<runtime.Types.Result.GetResult<Prisma.$HeroSettingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more HeroSettings.
   * @param {HeroSettingDeleteManyArgs} args - Arguments to filter HeroSettings to delete.
   * @example
   * // Delete a few HeroSettings
   * const { count } = await prisma.heroSetting.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends HeroSettingDeleteManyArgs>(args?: Prisma.SelectSubset<T, HeroSettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more HeroSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HeroSettingUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many HeroSettings
   * const heroSetting = await prisma.heroSetting.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends HeroSettingUpdateManyArgs>(args: Prisma.SelectSubset<T, HeroSettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more HeroSettings and returns the data updated in the database.
   * @param {HeroSettingUpdateManyAndReturnArgs} args - Arguments to update many HeroSettings.
   * @example
   * // Update many HeroSettings
   * const heroSetting = await prisma.heroSetting.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more HeroSettings and only return the `id`
   * const heroSettingWithIdOnly = await prisma.heroSetting.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends HeroSettingUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, HeroSettingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$HeroSettingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one HeroSetting.
   * @param {HeroSettingUpsertArgs} args - Arguments to update or create a HeroSetting.
   * @example
   * // Update or create a HeroSetting
   * const heroSetting = await prisma.heroSetting.upsert({
   *   create: {
   *     // ... data to create a HeroSetting
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the HeroSetting we want to update
   *   }
   * })
   */
  upsert<T extends HeroSettingUpsertArgs>(args: Prisma.SelectSubset<T, HeroSettingUpsertArgs<ExtArgs>>): Prisma.Prisma__HeroSettingClient<runtime.Types.Result.GetResult<Prisma.$HeroSettingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of HeroSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HeroSettingCountArgs} args - Arguments to filter HeroSettings to count.
   * @example
   * // Count the number of HeroSettings
   * const count = await prisma.heroSetting.count({
   *   where: {
   *     // ... the filter for the HeroSettings we want to count
   *   }
   * })
  **/
  count<T extends HeroSettingCountArgs>(
    args?: Prisma.Subset<T, HeroSettingCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], HeroSettingCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a HeroSetting.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HeroSettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends HeroSettingAggregateArgs>(args: Prisma.Subset<T, HeroSettingAggregateArgs>): Prisma.PrismaPromise<GetHeroSettingAggregateType<T>>

  /**
   * Group by HeroSetting.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HeroSettingGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends HeroSettingGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: HeroSettingGroupByArgs['orderBy'] }
      : { orderBy?: HeroSettingGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, HeroSettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHeroSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the HeroSetting model
 */
readonly fields: HeroSettingFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for HeroSetting.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__HeroSettingClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the HeroSetting model
 */
export interface HeroSettingFieldRefs {
  readonly id: Prisma.FieldRef<"HeroSetting", 'String'>
  readonly imageUrl: Prisma.FieldRef<"HeroSetting", 'String'>
  readonly title: Prisma.FieldRef<"HeroSetting", 'String'>
  readonly description: Prisma.FieldRef<"HeroSetting", 'String'>
  readonly buttonText: Prisma.FieldRef<"HeroSetting", 'String'>
  readonly buttonLink: Prisma.FieldRef<"HeroSetting", 'String'>
  readonly textPosition: Prisma.FieldRef<"HeroSetting", 'String'>
  readonly active: Prisma.FieldRef<"HeroSetting", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"HeroSetting", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"HeroSetting", 'DateTime'>
}
    

// Custom InputTypes
/**
 * HeroSetting findUnique
 */
export type HeroSettingFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HeroSetting
   */
  select?: Prisma.HeroSettingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HeroSetting
   */
  omit?: Prisma.HeroSettingOmit<ExtArgs> | null
  /**
   * Filter, which HeroSetting to fetch.
   */
  where: Prisma.HeroSettingWhereUniqueInput
}

/**
 * HeroSetting findUniqueOrThrow
 */
export type HeroSettingFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HeroSetting
   */
  select?: Prisma.HeroSettingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HeroSetting
   */
  omit?: Prisma.HeroSettingOmit<ExtArgs> | null
  /**
   * Filter, which HeroSetting to fetch.
   */
  where: Prisma.HeroSettingWhereUniqueInput
}

/**
 * HeroSetting findFirst
 */
export type HeroSettingFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HeroSetting
   */
  select?: Prisma.HeroSettingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HeroSetting
   */
  omit?: Prisma.HeroSettingOmit<ExtArgs> | null
  /**
   * Filter, which HeroSetting to fetch.
   */
  where?: Prisma.HeroSettingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of HeroSettings to fetch.
   */
  orderBy?: Prisma.HeroSettingOrderByWithRelationInput | Prisma.HeroSettingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for HeroSettings.
   */
  cursor?: Prisma.HeroSettingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` HeroSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` HeroSettings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of HeroSettings.
   */
  distinct?: Prisma.HeroSettingScalarFieldEnum | Prisma.HeroSettingScalarFieldEnum[]
}

/**
 * HeroSetting findFirstOrThrow
 */
export type HeroSettingFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HeroSetting
   */
  select?: Prisma.HeroSettingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HeroSetting
   */
  omit?: Prisma.HeroSettingOmit<ExtArgs> | null
  /**
   * Filter, which HeroSetting to fetch.
   */
  where?: Prisma.HeroSettingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of HeroSettings to fetch.
   */
  orderBy?: Prisma.HeroSettingOrderByWithRelationInput | Prisma.HeroSettingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for HeroSettings.
   */
  cursor?: Prisma.HeroSettingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` HeroSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` HeroSettings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of HeroSettings.
   */
  distinct?: Prisma.HeroSettingScalarFieldEnum | Prisma.HeroSettingScalarFieldEnum[]
}

/**
 * HeroSetting findMany
 */
export type HeroSettingFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HeroSetting
   */
  select?: Prisma.HeroSettingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HeroSetting
   */
  omit?: Prisma.HeroSettingOmit<ExtArgs> | null
  /**
   * Filter, which HeroSettings to fetch.
   */
  where?: Prisma.HeroSettingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of HeroSettings to fetch.
   */
  orderBy?: Prisma.HeroSettingOrderByWithRelationInput | Prisma.HeroSettingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing HeroSettings.
   */
  cursor?: Prisma.HeroSettingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` HeroSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` HeroSettings.
   */
  skip?: number
  distinct?: Prisma.HeroSettingScalarFieldEnum | Prisma.HeroSettingScalarFieldEnum[]
}

/**
 * HeroSetting create
 */
export type HeroSettingCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HeroSetting
   */
  select?: Prisma.HeroSettingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HeroSetting
   */
  omit?: Prisma.HeroSettingOmit<ExtArgs> | null
  /**
   * The data needed to create a HeroSetting.
   */
  data: Prisma.XOR<Prisma.HeroSettingCreateInput, Prisma.HeroSettingUncheckedCreateInput>
}

/**
 * HeroSetting createMany
 */
export type HeroSettingCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many HeroSettings.
   */
  data: Prisma.HeroSettingCreateManyInput | Prisma.HeroSettingCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * HeroSetting createManyAndReturn
 */
export type HeroSettingCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HeroSetting
   */
  select?: Prisma.HeroSettingSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the HeroSetting
   */
  omit?: Prisma.HeroSettingOmit<ExtArgs> | null
  /**
   * The data used to create many HeroSettings.
   */
  data: Prisma.HeroSettingCreateManyInput | Prisma.HeroSettingCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * HeroSetting update
 */
export type HeroSettingUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HeroSetting
   */
  select?: Prisma.HeroSettingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HeroSetting
   */
  omit?: Prisma.HeroSettingOmit<ExtArgs> | null
  /**
   * The data needed to update a HeroSetting.
   */
  data: Prisma.XOR<Prisma.HeroSettingUpdateInput, Prisma.HeroSettingUncheckedUpdateInput>
  /**
   * Choose, which HeroSetting to update.
   */
  where: Prisma.HeroSettingWhereUniqueInput
}

/**
 * HeroSetting updateMany
 */
export type HeroSettingUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update HeroSettings.
   */
  data: Prisma.XOR<Prisma.HeroSettingUpdateManyMutationInput, Prisma.HeroSettingUncheckedUpdateManyInput>
  /**
   * Filter which HeroSettings to update
   */
  where?: Prisma.HeroSettingWhereInput
  /**
   * Limit how many HeroSettings to update.
   */
  limit?: number
}

/**
 * HeroSetting updateManyAndReturn
 */
export type HeroSettingUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HeroSetting
   */
  select?: Prisma.HeroSettingSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the HeroSetting
   */
  omit?: Prisma.HeroSettingOmit<ExtArgs> | null
  /**
   * The data used to update HeroSettings.
   */
  data: Prisma.XOR<Prisma.HeroSettingUpdateManyMutationInput, Prisma.HeroSettingUncheckedUpdateManyInput>
  /**
   * Filter which HeroSettings to update
   */
  where?: Prisma.HeroSettingWhereInput
  /**
   * Limit how many HeroSettings to update.
   */
  limit?: number
}

/**
 * HeroSetting upsert
 */
export type HeroSettingUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HeroSetting
   */
  select?: Prisma.HeroSettingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HeroSetting
   */
  omit?: Prisma.HeroSettingOmit<ExtArgs> | null
  /**
   * The filter to search for the HeroSetting to update in case it exists.
   */
  where: Prisma.HeroSettingWhereUniqueInput
  /**
   * In case the HeroSetting found by the `where` argument doesn't exist, create a new HeroSetting with this data.
   */
  create: Prisma.XOR<Prisma.HeroSettingCreateInput, Prisma.HeroSettingUncheckedCreateInput>
  /**
   * In case the HeroSetting was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.HeroSettingUpdateInput, Prisma.HeroSettingUncheckedUpdateInput>
}

/**
 * HeroSetting delete
 */
export type HeroSettingDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HeroSetting
   */
  select?: Prisma.HeroSettingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HeroSetting
   */
  omit?: Prisma.HeroSettingOmit<ExtArgs> | null
  /**
   * Filter which HeroSetting to delete.
   */
  where: Prisma.HeroSettingWhereUniqueInput
}

/**
 * HeroSetting deleteMany
 */
export type HeroSettingDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which HeroSettings to delete
   */
  where?: Prisma.HeroSettingWhereInput
  /**
   * Limit how many HeroSettings to delete.
   */
  limit?: number
}

/**
 * HeroSetting without action
 */
export type HeroSettingDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HeroSetting
   */
  select?: Prisma.HeroSettingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HeroSetting
   */
  omit?: Prisma.HeroSettingOmit<ExtArgs> | null
}
