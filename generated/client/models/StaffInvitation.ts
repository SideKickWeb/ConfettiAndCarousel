
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `StaffInvitation` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model StaffInvitation
 * 
 */
export type StaffInvitationModel = runtime.Types.Result.DefaultSelection<Prisma.$StaffInvitationPayload>

export type AggregateStaffInvitation = {
  _count: StaffInvitationCountAggregateOutputType | null
  _min: StaffInvitationMinAggregateOutputType | null
  _max: StaffInvitationMaxAggregateOutputType | null
}

export type StaffInvitationMinAggregateOutputType = {
  id: string | null
  email: string | null
  firstName: string | null
  lastName: string | null
  role: string | null
  accessLevel: string | null
  token: string | null
  used: boolean | null
  usedAt: Date | null
  createdAt: Date | null
  expiresAt: Date | null
}

export type StaffInvitationMaxAggregateOutputType = {
  id: string | null
  email: string | null
  firstName: string | null
  lastName: string | null
  role: string | null
  accessLevel: string | null
  token: string | null
  used: boolean | null
  usedAt: Date | null
  createdAt: Date | null
  expiresAt: Date | null
}

export type StaffInvitationCountAggregateOutputType = {
  id: number
  email: number
  firstName: number
  lastName: number
  role: number
  accessLevel: number
  token: number
  used: number
  usedAt: number
  createdAt: number
  expiresAt: number
  _all: number
}


export type StaffInvitationMinAggregateInputType = {
  id?: true
  email?: true
  firstName?: true
  lastName?: true
  role?: true
  accessLevel?: true
  token?: true
  used?: true
  usedAt?: true
  createdAt?: true
  expiresAt?: true
}

export type StaffInvitationMaxAggregateInputType = {
  id?: true
  email?: true
  firstName?: true
  lastName?: true
  role?: true
  accessLevel?: true
  token?: true
  used?: true
  usedAt?: true
  createdAt?: true
  expiresAt?: true
}

export type StaffInvitationCountAggregateInputType = {
  id?: true
  email?: true
  firstName?: true
  lastName?: true
  role?: true
  accessLevel?: true
  token?: true
  used?: true
  usedAt?: true
  createdAt?: true
  expiresAt?: true
  _all?: true
}

export type StaffInvitationAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which StaffInvitation to aggregate.
   */
  where?: Prisma.StaffInvitationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StaffInvitations to fetch.
   */
  orderBy?: Prisma.StaffInvitationOrderByWithRelationInput | Prisma.StaffInvitationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.StaffInvitationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StaffInvitations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StaffInvitations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned StaffInvitations
  **/
  _count?: true | StaffInvitationCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: StaffInvitationMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: StaffInvitationMaxAggregateInputType
}

export type GetStaffInvitationAggregateType<T extends StaffInvitationAggregateArgs> = {
      [P in keyof T & keyof AggregateStaffInvitation]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateStaffInvitation[P]>
    : Prisma.GetScalarType<T[P], AggregateStaffInvitation[P]>
}




export type StaffInvitationGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.StaffInvitationWhereInput
  orderBy?: Prisma.StaffInvitationOrderByWithAggregationInput | Prisma.StaffInvitationOrderByWithAggregationInput[]
  by: Prisma.StaffInvitationScalarFieldEnum[] | Prisma.StaffInvitationScalarFieldEnum
  having?: Prisma.StaffInvitationScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: StaffInvitationCountAggregateInputType | true
  _min?: StaffInvitationMinAggregateInputType
  _max?: StaffInvitationMaxAggregateInputType
}

export type StaffInvitationGroupByOutputType = {
  id: string
  email: string
  firstName: string
  lastName: string
  role: string
  accessLevel: string
  token: string
  used: boolean
  usedAt: Date | null
  createdAt: Date
  expiresAt: Date
  _count: StaffInvitationCountAggregateOutputType | null
  _min: StaffInvitationMinAggregateOutputType | null
  _max: StaffInvitationMaxAggregateOutputType | null
}

type GetStaffInvitationGroupByPayload<T extends StaffInvitationGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<StaffInvitationGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof StaffInvitationGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], StaffInvitationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], StaffInvitationGroupByOutputType[P]>
      }
    >
  > 



export type StaffInvitationWhereInput = {
  AND?: Prisma.StaffInvitationWhereInput | Prisma.StaffInvitationWhereInput[]
  OR?: Prisma.StaffInvitationWhereInput[]
  NOT?: Prisma.StaffInvitationWhereInput | Prisma.StaffInvitationWhereInput[]
  id?: Prisma.StringFilter<"StaffInvitation"> | string
  email?: Prisma.StringFilter<"StaffInvitation"> | string
  firstName?: Prisma.StringFilter<"StaffInvitation"> | string
  lastName?: Prisma.StringFilter<"StaffInvitation"> | string
  role?: Prisma.StringFilter<"StaffInvitation"> | string
  accessLevel?: Prisma.StringFilter<"StaffInvitation"> | string
  token?: Prisma.StringFilter<"StaffInvitation"> | string
  used?: Prisma.BoolFilter<"StaffInvitation"> | boolean
  usedAt?: Prisma.DateTimeNullableFilter<"StaffInvitation"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"StaffInvitation"> | Date | string
  expiresAt?: Prisma.DateTimeFilter<"StaffInvitation"> | Date | string
}

export type StaffInvitationOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  role?: Prisma.SortOrder
  accessLevel?: Prisma.SortOrder
  token?: Prisma.SortOrder
  used?: Prisma.SortOrder
  usedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
}

export type StaffInvitationWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  token?: string
  AND?: Prisma.StaffInvitationWhereInput | Prisma.StaffInvitationWhereInput[]
  OR?: Prisma.StaffInvitationWhereInput[]
  NOT?: Prisma.StaffInvitationWhereInput | Prisma.StaffInvitationWhereInput[]
  email?: Prisma.StringFilter<"StaffInvitation"> | string
  firstName?: Prisma.StringFilter<"StaffInvitation"> | string
  lastName?: Prisma.StringFilter<"StaffInvitation"> | string
  role?: Prisma.StringFilter<"StaffInvitation"> | string
  accessLevel?: Prisma.StringFilter<"StaffInvitation"> | string
  used?: Prisma.BoolFilter<"StaffInvitation"> | boolean
  usedAt?: Prisma.DateTimeNullableFilter<"StaffInvitation"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"StaffInvitation"> | Date | string
  expiresAt?: Prisma.DateTimeFilter<"StaffInvitation"> | Date | string
}, "id" | "token">

export type StaffInvitationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  role?: Prisma.SortOrder
  accessLevel?: Prisma.SortOrder
  token?: Prisma.SortOrder
  used?: Prisma.SortOrder
  usedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  _count?: Prisma.StaffInvitationCountOrderByAggregateInput
  _max?: Prisma.StaffInvitationMaxOrderByAggregateInput
  _min?: Prisma.StaffInvitationMinOrderByAggregateInput
}

export type StaffInvitationScalarWhereWithAggregatesInput = {
  AND?: Prisma.StaffInvitationScalarWhereWithAggregatesInput | Prisma.StaffInvitationScalarWhereWithAggregatesInput[]
  OR?: Prisma.StaffInvitationScalarWhereWithAggregatesInput[]
  NOT?: Prisma.StaffInvitationScalarWhereWithAggregatesInput | Prisma.StaffInvitationScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"StaffInvitation"> | string
  email?: Prisma.StringWithAggregatesFilter<"StaffInvitation"> | string
  firstName?: Prisma.StringWithAggregatesFilter<"StaffInvitation"> | string
  lastName?: Prisma.StringWithAggregatesFilter<"StaffInvitation"> | string
  role?: Prisma.StringWithAggregatesFilter<"StaffInvitation"> | string
  accessLevel?: Prisma.StringWithAggregatesFilter<"StaffInvitation"> | string
  token?: Prisma.StringWithAggregatesFilter<"StaffInvitation"> | string
  used?: Prisma.BoolWithAggregatesFilter<"StaffInvitation"> | boolean
  usedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"StaffInvitation"> | Date | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"StaffInvitation"> | Date | string
  expiresAt?: Prisma.DateTimeWithAggregatesFilter<"StaffInvitation"> | Date | string
}

export type StaffInvitationCreateInput = {
  id: string
  email: string
  firstName: string
  lastName: string
  role: string
  accessLevel: string
  token: string
  used?: boolean
  usedAt?: Date | string | null
  createdAt?: Date | string
  expiresAt: Date | string
}

export type StaffInvitationUncheckedCreateInput = {
  id: string
  email: string
  firstName: string
  lastName: string
  role: string
  accessLevel: string
  token: string
  used?: boolean
  usedAt?: Date | string | null
  createdAt?: Date | string
  expiresAt: Date | string
}

export type StaffInvitationUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  accessLevel?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  used?: Prisma.BoolFieldUpdateOperationsInput | boolean
  usedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StaffInvitationUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  accessLevel?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  used?: Prisma.BoolFieldUpdateOperationsInput | boolean
  usedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StaffInvitationCreateManyInput = {
  id: string
  email: string
  firstName: string
  lastName: string
  role: string
  accessLevel: string
  token: string
  used?: boolean
  usedAt?: Date | string | null
  createdAt?: Date | string
  expiresAt: Date | string
}

export type StaffInvitationUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  accessLevel?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  used?: Prisma.BoolFieldUpdateOperationsInput | boolean
  usedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StaffInvitationUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  accessLevel?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  used?: Prisma.BoolFieldUpdateOperationsInput | boolean
  usedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StaffInvitationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  role?: Prisma.SortOrder
  accessLevel?: Prisma.SortOrder
  token?: Prisma.SortOrder
  used?: Prisma.SortOrder
  usedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
}

export type StaffInvitationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  role?: Prisma.SortOrder
  accessLevel?: Prisma.SortOrder
  token?: Prisma.SortOrder
  used?: Prisma.SortOrder
  usedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
}

export type StaffInvitationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  role?: Prisma.SortOrder
  accessLevel?: Prisma.SortOrder
  token?: Prisma.SortOrder
  used?: Prisma.SortOrder
  usedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
}



export type StaffInvitationSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  email?: boolean
  firstName?: boolean
  lastName?: boolean
  role?: boolean
  accessLevel?: boolean
  token?: boolean
  used?: boolean
  usedAt?: boolean
  createdAt?: boolean
  expiresAt?: boolean
}, ExtArgs["result"]["staffInvitation"]>

export type StaffInvitationSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  email?: boolean
  firstName?: boolean
  lastName?: boolean
  role?: boolean
  accessLevel?: boolean
  token?: boolean
  used?: boolean
  usedAt?: boolean
  createdAt?: boolean
  expiresAt?: boolean
}, ExtArgs["result"]["staffInvitation"]>

export type StaffInvitationSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  email?: boolean
  firstName?: boolean
  lastName?: boolean
  role?: boolean
  accessLevel?: boolean
  token?: boolean
  used?: boolean
  usedAt?: boolean
  createdAt?: boolean
  expiresAt?: boolean
}, ExtArgs["result"]["staffInvitation"]>

export type StaffInvitationSelectScalar = {
  id?: boolean
  email?: boolean
  firstName?: boolean
  lastName?: boolean
  role?: boolean
  accessLevel?: boolean
  token?: boolean
  used?: boolean
  usedAt?: boolean
  createdAt?: boolean
  expiresAt?: boolean
}

export type StaffInvitationOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "email" | "firstName" | "lastName" | "role" | "accessLevel" | "token" | "used" | "usedAt" | "createdAt" | "expiresAt", ExtArgs["result"]["staffInvitation"]>

export type $StaffInvitationPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "StaffInvitation"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    email: string
    firstName: string
    lastName: string
    role: string
    accessLevel: string
    token: string
    used: boolean
    usedAt: Date | null
    createdAt: Date
    expiresAt: Date
  }, ExtArgs["result"]["staffInvitation"]>
  composites: {}
}

export type StaffInvitationGetPayload<S extends boolean | null | undefined | StaffInvitationDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$StaffInvitationPayload, S>

export type StaffInvitationCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<StaffInvitationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: StaffInvitationCountAggregateInputType | true
  }

export interface StaffInvitationDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StaffInvitation'], meta: { name: 'StaffInvitation' } }
  /**
   * Find zero or one StaffInvitation that matches the filter.
   * @param {StaffInvitationFindUniqueArgs} args - Arguments to find a StaffInvitation
   * @example
   * // Get one StaffInvitation
   * const staffInvitation = await prisma.staffInvitation.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends StaffInvitationFindUniqueArgs>(args: Prisma.SelectSubset<T, StaffInvitationFindUniqueArgs<ExtArgs>>): Prisma.Prisma__StaffInvitationClient<runtime.Types.Result.GetResult<Prisma.$StaffInvitationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one StaffInvitation that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {StaffInvitationFindUniqueOrThrowArgs} args - Arguments to find a StaffInvitation
   * @example
   * // Get one StaffInvitation
   * const staffInvitation = await prisma.staffInvitation.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends StaffInvitationFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, StaffInvitationFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__StaffInvitationClient<runtime.Types.Result.GetResult<Prisma.$StaffInvitationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first StaffInvitation that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffInvitationFindFirstArgs} args - Arguments to find a StaffInvitation
   * @example
   * // Get one StaffInvitation
   * const staffInvitation = await prisma.staffInvitation.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends StaffInvitationFindFirstArgs>(args?: Prisma.SelectSubset<T, StaffInvitationFindFirstArgs<ExtArgs>>): Prisma.Prisma__StaffInvitationClient<runtime.Types.Result.GetResult<Prisma.$StaffInvitationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first StaffInvitation that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffInvitationFindFirstOrThrowArgs} args - Arguments to find a StaffInvitation
   * @example
   * // Get one StaffInvitation
   * const staffInvitation = await prisma.staffInvitation.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends StaffInvitationFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, StaffInvitationFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__StaffInvitationClient<runtime.Types.Result.GetResult<Prisma.$StaffInvitationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more StaffInvitations that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffInvitationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all StaffInvitations
   * const staffInvitations = await prisma.staffInvitation.findMany()
   * 
   * // Get first 10 StaffInvitations
   * const staffInvitations = await prisma.staffInvitation.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const staffInvitationWithIdOnly = await prisma.staffInvitation.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends StaffInvitationFindManyArgs>(args?: Prisma.SelectSubset<T, StaffInvitationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StaffInvitationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a StaffInvitation.
   * @param {StaffInvitationCreateArgs} args - Arguments to create a StaffInvitation.
   * @example
   * // Create one StaffInvitation
   * const StaffInvitation = await prisma.staffInvitation.create({
   *   data: {
   *     // ... data to create a StaffInvitation
   *   }
   * })
   * 
   */
  create<T extends StaffInvitationCreateArgs>(args: Prisma.SelectSubset<T, StaffInvitationCreateArgs<ExtArgs>>): Prisma.Prisma__StaffInvitationClient<runtime.Types.Result.GetResult<Prisma.$StaffInvitationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many StaffInvitations.
   * @param {StaffInvitationCreateManyArgs} args - Arguments to create many StaffInvitations.
   * @example
   * // Create many StaffInvitations
   * const staffInvitation = await prisma.staffInvitation.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends StaffInvitationCreateManyArgs>(args?: Prisma.SelectSubset<T, StaffInvitationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many StaffInvitations and returns the data saved in the database.
   * @param {StaffInvitationCreateManyAndReturnArgs} args - Arguments to create many StaffInvitations.
   * @example
   * // Create many StaffInvitations
   * const staffInvitation = await prisma.staffInvitation.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many StaffInvitations and only return the `id`
   * const staffInvitationWithIdOnly = await prisma.staffInvitation.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends StaffInvitationCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, StaffInvitationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StaffInvitationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a StaffInvitation.
   * @param {StaffInvitationDeleteArgs} args - Arguments to delete one StaffInvitation.
   * @example
   * // Delete one StaffInvitation
   * const StaffInvitation = await prisma.staffInvitation.delete({
   *   where: {
   *     // ... filter to delete one StaffInvitation
   *   }
   * })
   * 
   */
  delete<T extends StaffInvitationDeleteArgs>(args: Prisma.SelectSubset<T, StaffInvitationDeleteArgs<ExtArgs>>): Prisma.Prisma__StaffInvitationClient<runtime.Types.Result.GetResult<Prisma.$StaffInvitationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one StaffInvitation.
   * @param {StaffInvitationUpdateArgs} args - Arguments to update one StaffInvitation.
   * @example
   * // Update one StaffInvitation
   * const staffInvitation = await prisma.staffInvitation.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends StaffInvitationUpdateArgs>(args: Prisma.SelectSubset<T, StaffInvitationUpdateArgs<ExtArgs>>): Prisma.Prisma__StaffInvitationClient<runtime.Types.Result.GetResult<Prisma.$StaffInvitationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more StaffInvitations.
   * @param {StaffInvitationDeleteManyArgs} args - Arguments to filter StaffInvitations to delete.
   * @example
   * // Delete a few StaffInvitations
   * const { count } = await prisma.staffInvitation.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends StaffInvitationDeleteManyArgs>(args?: Prisma.SelectSubset<T, StaffInvitationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more StaffInvitations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffInvitationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many StaffInvitations
   * const staffInvitation = await prisma.staffInvitation.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends StaffInvitationUpdateManyArgs>(args: Prisma.SelectSubset<T, StaffInvitationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more StaffInvitations and returns the data updated in the database.
   * @param {StaffInvitationUpdateManyAndReturnArgs} args - Arguments to update many StaffInvitations.
   * @example
   * // Update many StaffInvitations
   * const staffInvitation = await prisma.staffInvitation.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more StaffInvitations and only return the `id`
   * const staffInvitationWithIdOnly = await prisma.staffInvitation.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends StaffInvitationUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, StaffInvitationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StaffInvitationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one StaffInvitation.
   * @param {StaffInvitationUpsertArgs} args - Arguments to update or create a StaffInvitation.
   * @example
   * // Update or create a StaffInvitation
   * const staffInvitation = await prisma.staffInvitation.upsert({
   *   create: {
   *     // ... data to create a StaffInvitation
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the StaffInvitation we want to update
   *   }
   * })
   */
  upsert<T extends StaffInvitationUpsertArgs>(args: Prisma.SelectSubset<T, StaffInvitationUpsertArgs<ExtArgs>>): Prisma.Prisma__StaffInvitationClient<runtime.Types.Result.GetResult<Prisma.$StaffInvitationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of StaffInvitations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffInvitationCountArgs} args - Arguments to filter StaffInvitations to count.
   * @example
   * // Count the number of StaffInvitations
   * const count = await prisma.staffInvitation.count({
   *   where: {
   *     // ... the filter for the StaffInvitations we want to count
   *   }
   * })
  **/
  count<T extends StaffInvitationCountArgs>(
    args?: Prisma.Subset<T, StaffInvitationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], StaffInvitationCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a StaffInvitation.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffInvitationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends StaffInvitationAggregateArgs>(args: Prisma.Subset<T, StaffInvitationAggregateArgs>): Prisma.PrismaPromise<GetStaffInvitationAggregateType<T>>

  /**
   * Group by StaffInvitation.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffInvitationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends StaffInvitationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: StaffInvitationGroupByArgs['orderBy'] }
      : { orderBy?: StaffInvitationGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, StaffInvitationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStaffInvitationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the StaffInvitation model
 */
readonly fields: StaffInvitationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for StaffInvitation.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__StaffInvitationClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the StaffInvitation model
 */
export interface StaffInvitationFieldRefs {
  readonly id: Prisma.FieldRef<"StaffInvitation", 'String'>
  readonly email: Prisma.FieldRef<"StaffInvitation", 'String'>
  readonly firstName: Prisma.FieldRef<"StaffInvitation", 'String'>
  readonly lastName: Prisma.FieldRef<"StaffInvitation", 'String'>
  readonly role: Prisma.FieldRef<"StaffInvitation", 'String'>
  readonly accessLevel: Prisma.FieldRef<"StaffInvitation", 'String'>
  readonly token: Prisma.FieldRef<"StaffInvitation", 'String'>
  readonly used: Prisma.FieldRef<"StaffInvitation", 'Boolean'>
  readonly usedAt: Prisma.FieldRef<"StaffInvitation", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"StaffInvitation", 'DateTime'>
  readonly expiresAt: Prisma.FieldRef<"StaffInvitation", 'DateTime'>
}
    

// Custom InputTypes
/**
 * StaffInvitation findUnique
 */
export type StaffInvitationFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffInvitation
   */
  select?: Prisma.StaffInvitationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffInvitation
   */
  omit?: Prisma.StaffInvitationOmit<ExtArgs> | null
  /**
   * Filter, which StaffInvitation to fetch.
   */
  where: Prisma.StaffInvitationWhereUniqueInput
}

/**
 * StaffInvitation findUniqueOrThrow
 */
export type StaffInvitationFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffInvitation
   */
  select?: Prisma.StaffInvitationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffInvitation
   */
  omit?: Prisma.StaffInvitationOmit<ExtArgs> | null
  /**
   * Filter, which StaffInvitation to fetch.
   */
  where: Prisma.StaffInvitationWhereUniqueInput
}

/**
 * StaffInvitation findFirst
 */
export type StaffInvitationFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffInvitation
   */
  select?: Prisma.StaffInvitationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffInvitation
   */
  omit?: Prisma.StaffInvitationOmit<ExtArgs> | null
  /**
   * Filter, which StaffInvitation to fetch.
   */
  where?: Prisma.StaffInvitationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StaffInvitations to fetch.
   */
  orderBy?: Prisma.StaffInvitationOrderByWithRelationInput | Prisma.StaffInvitationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for StaffInvitations.
   */
  cursor?: Prisma.StaffInvitationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StaffInvitations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StaffInvitations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of StaffInvitations.
   */
  distinct?: Prisma.StaffInvitationScalarFieldEnum | Prisma.StaffInvitationScalarFieldEnum[]
}

/**
 * StaffInvitation findFirstOrThrow
 */
export type StaffInvitationFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffInvitation
   */
  select?: Prisma.StaffInvitationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffInvitation
   */
  omit?: Prisma.StaffInvitationOmit<ExtArgs> | null
  /**
   * Filter, which StaffInvitation to fetch.
   */
  where?: Prisma.StaffInvitationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StaffInvitations to fetch.
   */
  orderBy?: Prisma.StaffInvitationOrderByWithRelationInput | Prisma.StaffInvitationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for StaffInvitations.
   */
  cursor?: Prisma.StaffInvitationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StaffInvitations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StaffInvitations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of StaffInvitations.
   */
  distinct?: Prisma.StaffInvitationScalarFieldEnum | Prisma.StaffInvitationScalarFieldEnum[]
}

/**
 * StaffInvitation findMany
 */
export type StaffInvitationFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffInvitation
   */
  select?: Prisma.StaffInvitationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffInvitation
   */
  omit?: Prisma.StaffInvitationOmit<ExtArgs> | null
  /**
   * Filter, which StaffInvitations to fetch.
   */
  where?: Prisma.StaffInvitationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StaffInvitations to fetch.
   */
  orderBy?: Prisma.StaffInvitationOrderByWithRelationInput | Prisma.StaffInvitationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing StaffInvitations.
   */
  cursor?: Prisma.StaffInvitationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StaffInvitations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StaffInvitations.
   */
  skip?: number
  distinct?: Prisma.StaffInvitationScalarFieldEnum | Prisma.StaffInvitationScalarFieldEnum[]
}

/**
 * StaffInvitation create
 */
export type StaffInvitationCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffInvitation
   */
  select?: Prisma.StaffInvitationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffInvitation
   */
  omit?: Prisma.StaffInvitationOmit<ExtArgs> | null
  /**
   * The data needed to create a StaffInvitation.
   */
  data: Prisma.XOR<Prisma.StaffInvitationCreateInput, Prisma.StaffInvitationUncheckedCreateInput>
}

/**
 * StaffInvitation createMany
 */
export type StaffInvitationCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many StaffInvitations.
   */
  data: Prisma.StaffInvitationCreateManyInput | Prisma.StaffInvitationCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * StaffInvitation createManyAndReturn
 */
export type StaffInvitationCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffInvitation
   */
  select?: Prisma.StaffInvitationSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the StaffInvitation
   */
  omit?: Prisma.StaffInvitationOmit<ExtArgs> | null
  /**
   * The data used to create many StaffInvitations.
   */
  data: Prisma.StaffInvitationCreateManyInput | Prisma.StaffInvitationCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * StaffInvitation update
 */
export type StaffInvitationUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffInvitation
   */
  select?: Prisma.StaffInvitationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffInvitation
   */
  omit?: Prisma.StaffInvitationOmit<ExtArgs> | null
  /**
   * The data needed to update a StaffInvitation.
   */
  data: Prisma.XOR<Prisma.StaffInvitationUpdateInput, Prisma.StaffInvitationUncheckedUpdateInput>
  /**
   * Choose, which StaffInvitation to update.
   */
  where: Prisma.StaffInvitationWhereUniqueInput
}

/**
 * StaffInvitation updateMany
 */
export type StaffInvitationUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update StaffInvitations.
   */
  data: Prisma.XOR<Prisma.StaffInvitationUpdateManyMutationInput, Prisma.StaffInvitationUncheckedUpdateManyInput>
  /**
   * Filter which StaffInvitations to update
   */
  where?: Prisma.StaffInvitationWhereInput
  /**
   * Limit how many StaffInvitations to update.
   */
  limit?: number
}

/**
 * StaffInvitation updateManyAndReturn
 */
export type StaffInvitationUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffInvitation
   */
  select?: Prisma.StaffInvitationSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the StaffInvitation
   */
  omit?: Prisma.StaffInvitationOmit<ExtArgs> | null
  /**
   * The data used to update StaffInvitations.
   */
  data: Prisma.XOR<Prisma.StaffInvitationUpdateManyMutationInput, Prisma.StaffInvitationUncheckedUpdateManyInput>
  /**
   * Filter which StaffInvitations to update
   */
  where?: Prisma.StaffInvitationWhereInput
  /**
   * Limit how many StaffInvitations to update.
   */
  limit?: number
}

/**
 * StaffInvitation upsert
 */
export type StaffInvitationUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffInvitation
   */
  select?: Prisma.StaffInvitationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffInvitation
   */
  omit?: Prisma.StaffInvitationOmit<ExtArgs> | null
  /**
   * The filter to search for the StaffInvitation to update in case it exists.
   */
  where: Prisma.StaffInvitationWhereUniqueInput
  /**
   * In case the StaffInvitation found by the `where` argument doesn't exist, create a new StaffInvitation with this data.
   */
  create: Prisma.XOR<Prisma.StaffInvitationCreateInput, Prisma.StaffInvitationUncheckedCreateInput>
  /**
   * In case the StaffInvitation was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.StaffInvitationUpdateInput, Prisma.StaffInvitationUncheckedUpdateInput>
}

/**
 * StaffInvitation delete
 */
export type StaffInvitationDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffInvitation
   */
  select?: Prisma.StaffInvitationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffInvitation
   */
  omit?: Prisma.StaffInvitationOmit<ExtArgs> | null
  /**
   * Filter which StaffInvitation to delete.
   */
  where: Prisma.StaffInvitationWhereUniqueInput
}

/**
 * StaffInvitation deleteMany
 */
export type StaffInvitationDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which StaffInvitations to delete
   */
  where?: Prisma.StaffInvitationWhereInput
  /**
   * Limit how many StaffInvitations to delete.
   */
  limit?: number
}

/**
 * StaffInvitation without action
 */
export type StaffInvitationDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffInvitation
   */
  select?: Prisma.StaffInvitationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffInvitation
   */
  omit?: Prisma.StaffInvitationOmit<ExtArgs> | null
}
