
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `task_dependencies` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model task_dependencies
 * 
 */
export type task_dependenciesModel = runtime.Types.Result.DefaultSelection<Prisma.$task_dependenciesPayload>

export type AggregateTask_dependencies = {
  _count: Task_dependenciesCountAggregateOutputType | null
  _min: Task_dependenciesMinAggregateOutputType | null
  _max: Task_dependenciesMaxAggregateOutputType | null
}

export type Task_dependenciesMinAggregateOutputType = {
  id: string | null
  taskId: string | null
  dependsOnTaskId: string | null
  createdAt: Date | null
}

export type Task_dependenciesMaxAggregateOutputType = {
  id: string | null
  taskId: string | null
  dependsOnTaskId: string | null
  createdAt: Date | null
}

export type Task_dependenciesCountAggregateOutputType = {
  id: number
  taskId: number
  dependsOnTaskId: number
  createdAt: number
  _all: number
}


export type Task_dependenciesMinAggregateInputType = {
  id?: true
  taskId?: true
  dependsOnTaskId?: true
  createdAt?: true
}

export type Task_dependenciesMaxAggregateInputType = {
  id?: true
  taskId?: true
  dependsOnTaskId?: true
  createdAt?: true
}

export type Task_dependenciesCountAggregateInputType = {
  id?: true
  taskId?: true
  dependsOnTaskId?: true
  createdAt?: true
  _all?: true
}

export type Task_dependenciesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which task_dependencies to aggregate.
   */
  where?: Prisma.task_dependenciesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of task_dependencies to fetch.
   */
  orderBy?: Prisma.task_dependenciesOrderByWithRelationInput | Prisma.task_dependenciesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.task_dependenciesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` task_dependencies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` task_dependencies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned task_dependencies
  **/
  _count?: true | Task_dependenciesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Task_dependenciesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Task_dependenciesMaxAggregateInputType
}

export type GetTask_dependenciesAggregateType<T extends Task_dependenciesAggregateArgs> = {
      [P in keyof T & keyof AggregateTask_dependencies]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTask_dependencies[P]>
    : Prisma.GetScalarType<T[P], AggregateTask_dependencies[P]>
}




export type task_dependenciesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.task_dependenciesWhereInput
  orderBy?: Prisma.task_dependenciesOrderByWithAggregationInput | Prisma.task_dependenciesOrderByWithAggregationInput[]
  by: Prisma.Task_dependenciesScalarFieldEnum[] | Prisma.Task_dependenciesScalarFieldEnum
  having?: Prisma.task_dependenciesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Task_dependenciesCountAggregateInputType | true
  _min?: Task_dependenciesMinAggregateInputType
  _max?: Task_dependenciesMaxAggregateInputType
}

export type Task_dependenciesGroupByOutputType = {
  id: string
  taskId: string
  dependsOnTaskId: string
  createdAt: Date
  _count: Task_dependenciesCountAggregateOutputType | null
  _min: Task_dependenciesMinAggregateOutputType | null
  _max: Task_dependenciesMaxAggregateOutputType | null
}

type GetTask_dependenciesGroupByPayload<T extends task_dependenciesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Task_dependenciesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Task_dependenciesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Task_dependenciesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Task_dependenciesGroupByOutputType[P]>
      }
    >
  > 



export type task_dependenciesWhereInput = {
  AND?: Prisma.task_dependenciesWhereInput | Prisma.task_dependenciesWhereInput[]
  OR?: Prisma.task_dependenciesWhereInput[]
  NOT?: Prisma.task_dependenciesWhereInput | Prisma.task_dependenciesWhereInput[]
  id?: Prisma.StringFilter<"task_dependencies"> | string
  taskId?: Prisma.StringFilter<"task_dependencies"> | string
  dependsOnTaskId?: Prisma.StringFilter<"task_dependencies"> | string
  createdAt?: Prisma.DateTimeFilter<"task_dependencies"> | Date | string
  tasks_task_dependencies_dependsOnTaskIdTotasks?: Prisma.XOR<Prisma.TasksScalarRelationFilter, Prisma.tasksWhereInput>
  tasks_task_dependencies_taskIdTotasks?: Prisma.XOR<Prisma.TasksScalarRelationFilter, Prisma.tasksWhereInput>
}

export type task_dependenciesOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  taskId?: Prisma.SortOrder
  dependsOnTaskId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  tasks_task_dependencies_dependsOnTaskIdTotasks?: Prisma.tasksOrderByWithRelationInput
  tasks_task_dependencies_taskIdTotasks?: Prisma.tasksOrderByWithRelationInput
}

export type task_dependenciesWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.task_dependenciesWhereInput | Prisma.task_dependenciesWhereInput[]
  OR?: Prisma.task_dependenciesWhereInput[]
  NOT?: Prisma.task_dependenciesWhereInput | Prisma.task_dependenciesWhereInput[]
  taskId?: Prisma.StringFilter<"task_dependencies"> | string
  dependsOnTaskId?: Prisma.StringFilter<"task_dependencies"> | string
  createdAt?: Prisma.DateTimeFilter<"task_dependencies"> | Date | string
  tasks_task_dependencies_dependsOnTaskIdTotasks?: Prisma.XOR<Prisma.TasksScalarRelationFilter, Prisma.tasksWhereInput>
  tasks_task_dependencies_taskIdTotasks?: Prisma.XOR<Prisma.TasksScalarRelationFilter, Prisma.tasksWhereInput>
}, "id">

export type task_dependenciesOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  taskId?: Prisma.SortOrder
  dependsOnTaskId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.task_dependenciesCountOrderByAggregateInput
  _max?: Prisma.task_dependenciesMaxOrderByAggregateInput
  _min?: Prisma.task_dependenciesMinOrderByAggregateInput
}

export type task_dependenciesScalarWhereWithAggregatesInput = {
  AND?: Prisma.task_dependenciesScalarWhereWithAggregatesInput | Prisma.task_dependenciesScalarWhereWithAggregatesInput[]
  OR?: Prisma.task_dependenciesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.task_dependenciesScalarWhereWithAggregatesInput | Prisma.task_dependenciesScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"task_dependencies"> | string
  taskId?: Prisma.StringWithAggregatesFilter<"task_dependencies"> | string
  dependsOnTaskId?: Prisma.StringWithAggregatesFilter<"task_dependencies"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"task_dependencies"> | Date | string
}

export type task_dependenciesCreateInput = {
  id: string
  createdAt?: Date | string
  tasks_task_dependencies_dependsOnTaskIdTotasks: Prisma.tasksCreateNestedOneWithoutTask_dependencies_task_dependencies_dependsOnTaskIdTotasksInput
  tasks_task_dependencies_taskIdTotasks: Prisma.tasksCreateNestedOneWithoutTask_dependencies_task_dependencies_taskIdTotasksInput
}

export type task_dependenciesUncheckedCreateInput = {
  id: string
  taskId: string
  dependsOnTaskId: string
  createdAt?: Date | string
}

export type task_dependenciesUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tasks_task_dependencies_dependsOnTaskIdTotasks?: Prisma.tasksUpdateOneRequiredWithoutTask_dependencies_task_dependencies_dependsOnTaskIdTotasksNestedInput
  tasks_task_dependencies_taskIdTotasks?: Prisma.tasksUpdateOneRequiredWithoutTask_dependencies_task_dependencies_taskIdTotasksNestedInput
}

export type task_dependenciesUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  taskId?: Prisma.StringFieldUpdateOperationsInput | string
  dependsOnTaskId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type task_dependenciesCreateManyInput = {
  id: string
  taskId: string
  dependsOnTaskId: string
  createdAt?: Date | string
}

export type task_dependenciesUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type task_dependenciesUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  taskId?: Prisma.StringFieldUpdateOperationsInput | string
  dependsOnTaskId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type task_dependenciesCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  taskId?: Prisma.SortOrder
  dependsOnTaskId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type task_dependenciesMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  taskId?: Prisma.SortOrder
  dependsOnTaskId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type task_dependenciesMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  taskId?: Prisma.SortOrder
  dependsOnTaskId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type Task_dependenciesListRelationFilter = {
  every?: Prisma.task_dependenciesWhereInput
  some?: Prisma.task_dependenciesWhereInput
  none?: Prisma.task_dependenciesWhereInput
}

export type task_dependenciesOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type task_dependenciesCreateNestedManyWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput = {
  create?: Prisma.XOR<Prisma.task_dependenciesCreateWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput, Prisma.task_dependenciesUncheckedCreateWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput> | Prisma.task_dependenciesCreateWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput[] | Prisma.task_dependenciesUncheckedCreateWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput[]
  connectOrCreate?: Prisma.task_dependenciesCreateOrConnectWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput | Prisma.task_dependenciesCreateOrConnectWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput[]
  createMany?: Prisma.task_dependenciesCreateManyTasks_task_dependencies_dependsOnTaskIdTotasksInputEnvelope
  connect?: Prisma.task_dependenciesWhereUniqueInput | Prisma.task_dependenciesWhereUniqueInput[]
}

export type task_dependenciesCreateNestedManyWithoutTasks_task_dependencies_taskIdTotasksInput = {
  create?: Prisma.XOR<Prisma.task_dependenciesCreateWithoutTasks_task_dependencies_taskIdTotasksInput, Prisma.task_dependenciesUncheckedCreateWithoutTasks_task_dependencies_taskIdTotasksInput> | Prisma.task_dependenciesCreateWithoutTasks_task_dependencies_taskIdTotasksInput[] | Prisma.task_dependenciesUncheckedCreateWithoutTasks_task_dependencies_taskIdTotasksInput[]
  connectOrCreate?: Prisma.task_dependenciesCreateOrConnectWithoutTasks_task_dependencies_taskIdTotasksInput | Prisma.task_dependenciesCreateOrConnectWithoutTasks_task_dependencies_taskIdTotasksInput[]
  createMany?: Prisma.task_dependenciesCreateManyTasks_task_dependencies_taskIdTotasksInputEnvelope
  connect?: Prisma.task_dependenciesWhereUniqueInput | Prisma.task_dependenciesWhereUniqueInput[]
}

export type task_dependenciesUncheckedCreateNestedManyWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput = {
  create?: Prisma.XOR<Prisma.task_dependenciesCreateWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput, Prisma.task_dependenciesUncheckedCreateWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput> | Prisma.task_dependenciesCreateWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput[] | Prisma.task_dependenciesUncheckedCreateWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput[]
  connectOrCreate?: Prisma.task_dependenciesCreateOrConnectWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput | Prisma.task_dependenciesCreateOrConnectWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput[]
  createMany?: Prisma.task_dependenciesCreateManyTasks_task_dependencies_dependsOnTaskIdTotasksInputEnvelope
  connect?: Prisma.task_dependenciesWhereUniqueInput | Prisma.task_dependenciesWhereUniqueInput[]
}

export type task_dependenciesUncheckedCreateNestedManyWithoutTasks_task_dependencies_taskIdTotasksInput = {
  create?: Prisma.XOR<Prisma.task_dependenciesCreateWithoutTasks_task_dependencies_taskIdTotasksInput, Prisma.task_dependenciesUncheckedCreateWithoutTasks_task_dependencies_taskIdTotasksInput> | Prisma.task_dependenciesCreateWithoutTasks_task_dependencies_taskIdTotasksInput[] | Prisma.task_dependenciesUncheckedCreateWithoutTasks_task_dependencies_taskIdTotasksInput[]
  connectOrCreate?: Prisma.task_dependenciesCreateOrConnectWithoutTasks_task_dependencies_taskIdTotasksInput | Prisma.task_dependenciesCreateOrConnectWithoutTasks_task_dependencies_taskIdTotasksInput[]
  createMany?: Prisma.task_dependenciesCreateManyTasks_task_dependencies_taskIdTotasksInputEnvelope
  connect?: Prisma.task_dependenciesWhereUniqueInput | Prisma.task_dependenciesWhereUniqueInput[]
}

export type task_dependenciesUpdateManyWithoutTasks_task_dependencies_dependsOnTaskIdTotasksNestedInput = {
  create?: Prisma.XOR<Prisma.task_dependenciesCreateWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput, Prisma.task_dependenciesUncheckedCreateWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput> | Prisma.task_dependenciesCreateWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput[] | Prisma.task_dependenciesUncheckedCreateWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput[]
  connectOrCreate?: Prisma.task_dependenciesCreateOrConnectWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput | Prisma.task_dependenciesCreateOrConnectWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput[]
  upsert?: Prisma.task_dependenciesUpsertWithWhereUniqueWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput | Prisma.task_dependenciesUpsertWithWhereUniqueWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput[]
  createMany?: Prisma.task_dependenciesCreateManyTasks_task_dependencies_dependsOnTaskIdTotasksInputEnvelope
  set?: Prisma.task_dependenciesWhereUniqueInput | Prisma.task_dependenciesWhereUniqueInput[]
  disconnect?: Prisma.task_dependenciesWhereUniqueInput | Prisma.task_dependenciesWhereUniqueInput[]
  delete?: Prisma.task_dependenciesWhereUniqueInput | Prisma.task_dependenciesWhereUniqueInput[]
  connect?: Prisma.task_dependenciesWhereUniqueInput | Prisma.task_dependenciesWhereUniqueInput[]
  update?: Prisma.task_dependenciesUpdateWithWhereUniqueWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput | Prisma.task_dependenciesUpdateWithWhereUniqueWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput[]
  updateMany?: Prisma.task_dependenciesUpdateManyWithWhereWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput | Prisma.task_dependenciesUpdateManyWithWhereWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput[]
  deleteMany?: Prisma.task_dependenciesScalarWhereInput | Prisma.task_dependenciesScalarWhereInput[]
}

export type task_dependenciesUpdateManyWithoutTasks_task_dependencies_taskIdTotasksNestedInput = {
  create?: Prisma.XOR<Prisma.task_dependenciesCreateWithoutTasks_task_dependencies_taskIdTotasksInput, Prisma.task_dependenciesUncheckedCreateWithoutTasks_task_dependencies_taskIdTotasksInput> | Prisma.task_dependenciesCreateWithoutTasks_task_dependencies_taskIdTotasksInput[] | Prisma.task_dependenciesUncheckedCreateWithoutTasks_task_dependencies_taskIdTotasksInput[]
  connectOrCreate?: Prisma.task_dependenciesCreateOrConnectWithoutTasks_task_dependencies_taskIdTotasksInput | Prisma.task_dependenciesCreateOrConnectWithoutTasks_task_dependencies_taskIdTotasksInput[]
  upsert?: Prisma.task_dependenciesUpsertWithWhereUniqueWithoutTasks_task_dependencies_taskIdTotasksInput | Prisma.task_dependenciesUpsertWithWhereUniqueWithoutTasks_task_dependencies_taskIdTotasksInput[]
  createMany?: Prisma.task_dependenciesCreateManyTasks_task_dependencies_taskIdTotasksInputEnvelope
  set?: Prisma.task_dependenciesWhereUniqueInput | Prisma.task_dependenciesWhereUniqueInput[]
  disconnect?: Prisma.task_dependenciesWhereUniqueInput | Prisma.task_dependenciesWhereUniqueInput[]
  delete?: Prisma.task_dependenciesWhereUniqueInput | Prisma.task_dependenciesWhereUniqueInput[]
  connect?: Prisma.task_dependenciesWhereUniqueInput | Prisma.task_dependenciesWhereUniqueInput[]
  update?: Prisma.task_dependenciesUpdateWithWhereUniqueWithoutTasks_task_dependencies_taskIdTotasksInput | Prisma.task_dependenciesUpdateWithWhereUniqueWithoutTasks_task_dependencies_taskIdTotasksInput[]
  updateMany?: Prisma.task_dependenciesUpdateManyWithWhereWithoutTasks_task_dependencies_taskIdTotasksInput | Prisma.task_dependenciesUpdateManyWithWhereWithoutTasks_task_dependencies_taskIdTotasksInput[]
  deleteMany?: Prisma.task_dependenciesScalarWhereInput | Prisma.task_dependenciesScalarWhereInput[]
}

export type task_dependenciesUncheckedUpdateManyWithoutTasks_task_dependencies_dependsOnTaskIdTotasksNestedInput = {
  create?: Prisma.XOR<Prisma.task_dependenciesCreateWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput, Prisma.task_dependenciesUncheckedCreateWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput> | Prisma.task_dependenciesCreateWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput[] | Prisma.task_dependenciesUncheckedCreateWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput[]
  connectOrCreate?: Prisma.task_dependenciesCreateOrConnectWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput | Prisma.task_dependenciesCreateOrConnectWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput[]
  upsert?: Prisma.task_dependenciesUpsertWithWhereUniqueWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput | Prisma.task_dependenciesUpsertWithWhereUniqueWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput[]
  createMany?: Prisma.task_dependenciesCreateManyTasks_task_dependencies_dependsOnTaskIdTotasksInputEnvelope
  set?: Prisma.task_dependenciesWhereUniqueInput | Prisma.task_dependenciesWhereUniqueInput[]
  disconnect?: Prisma.task_dependenciesWhereUniqueInput | Prisma.task_dependenciesWhereUniqueInput[]
  delete?: Prisma.task_dependenciesWhereUniqueInput | Prisma.task_dependenciesWhereUniqueInput[]
  connect?: Prisma.task_dependenciesWhereUniqueInput | Prisma.task_dependenciesWhereUniqueInput[]
  update?: Prisma.task_dependenciesUpdateWithWhereUniqueWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput | Prisma.task_dependenciesUpdateWithWhereUniqueWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput[]
  updateMany?: Prisma.task_dependenciesUpdateManyWithWhereWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput | Prisma.task_dependenciesUpdateManyWithWhereWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput[]
  deleteMany?: Prisma.task_dependenciesScalarWhereInput | Prisma.task_dependenciesScalarWhereInput[]
}

export type task_dependenciesUncheckedUpdateManyWithoutTasks_task_dependencies_taskIdTotasksNestedInput = {
  create?: Prisma.XOR<Prisma.task_dependenciesCreateWithoutTasks_task_dependencies_taskIdTotasksInput, Prisma.task_dependenciesUncheckedCreateWithoutTasks_task_dependencies_taskIdTotasksInput> | Prisma.task_dependenciesCreateWithoutTasks_task_dependencies_taskIdTotasksInput[] | Prisma.task_dependenciesUncheckedCreateWithoutTasks_task_dependencies_taskIdTotasksInput[]
  connectOrCreate?: Prisma.task_dependenciesCreateOrConnectWithoutTasks_task_dependencies_taskIdTotasksInput | Prisma.task_dependenciesCreateOrConnectWithoutTasks_task_dependencies_taskIdTotasksInput[]
  upsert?: Prisma.task_dependenciesUpsertWithWhereUniqueWithoutTasks_task_dependencies_taskIdTotasksInput | Prisma.task_dependenciesUpsertWithWhereUniqueWithoutTasks_task_dependencies_taskIdTotasksInput[]
  createMany?: Prisma.task_dependenciesCreateManyTasks_task_dependencies_taskIdTotasksInputEnvelope
  set?: Prisma.task_dependenciesWhereUniqueInput | Prisma.task_dependenciesWhereUniqueInput[]
  disconnect?: Prisma.task_dependenciesWhereUniqueInput | Prisma.task_dependenciesWhereUniqueInput[]
  delete?: Prisma.task_dependenciesWhereUniqueInput | Prisma.task_dependenciesWhereUniqueInput[]
  connect?: Prisma.task_dependenciesWhereUniqueInput | Prisma.task_dependenciesWhereUniqueInput[]
  update?: Prisma.task_dependenciesUpdateWithWhereUniqueWithoutTasks_task_dependencies_taskIdTotasksInput | Prisma.task_dependenciesUpdateWithWhereUniqueWithoutTasks_task_dependencies_taskIdTotasksInput[]
  updateMany?: Prisma.task_dependenciesUpdateManyWithWhereWithoutTasks_task_dependencies_taskIdTotasksInput | Prisma.task_dependenciesUpdateManyWithWhereWithoutTasks_task_dependencies_taskIdTotasksInput[]
  deleteMany?: Prisma.task_dependenciesScalarWhereInput | Prisma.task_dependenciesScalarWhereInput[]
}

export type task_dependenciesCreateWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput = {
  id: string
  createdAt?: Date | string
  tasks_task_dependencies_taskIdTotasks: Prisma.tasksCreateNestedOneWithoutTask_dependencies_task_dependencies_taskIdTotasksInput
}

export type task_dependenciesUncheckedCreateWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput = {
  id: string
  taskId: string
  createdAt?: Date | string
}

export type task_dependenciesCreateOrConnectWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput = {
  where: Prisma.task_dependenciesWhereUniqueInput
  create: Prisma.XOR<Prisma.task_dependenciesCreateWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput, Prisma.task_dependenciesUncheckedCreateWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput>
}

export type task_dependenciesCreateManyTasks_task_dependencies_dependsOnTaskIdTotasksInputEnvelope = {
  data: Prisma.task_dependenciesCreateManyTasks_task_dependencies_dependsOnTaskIdTotasksInput | Prisma.task_dependenciesCreateManyTasks_task_dependencies_dependsOnTaskIdTotasksInput[]
  skipDuplicates?: boolean
}

export type task_dependenciesCreateWithoutTasks_task_dependencies_taskIdTotasksInput = {
  id: string
  createdAt?: Date | string
  tasks_task_dependencies_dependsOnTaskIdTotasks: Prisma.tasksCreateNestedOneWithoutTask_dependencies_task_dependencies_dependsOnTaskIdTotasksInput
}

export type task_dependenciesUncheckedCreateWithoutTasks_task_dependencies_taskIdTotasksInput = {
  id: string
  dependsOnTaskId: string
  createdAt?: Date | string
}

export type task_dependenciesCreateOrConnectWithoutTasks_task_dependencies_taskIdTotasksInput = {
  where: Prisma.task_dependenciesWhereUniqueInput
  create: Prisma.XOR<Prisma.task_dependenciesCreateWithoutTasks_task_dependencies_taskIdTotasksInput, Prisma.task_dependenciesUncheckedCreateWithoutTasks_task_dependencies_taskIdTotasksInput>
}

export type task_dependenciesCreateManyTasks_task_dependencies_taskIdTotasksInputEnvelope = {
  data: Prisma.task_dependenciesCreateManyTasks_task_dependencies_taskIdTotasksInput | Prisma.task_dependenciesCreateManyTasks_task_dependencies_taskIdTotasksInput[]
  skipDuplicates?: boolean
}

export type task_dependenciesUpsertWithWhereUniqueWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput = {
  where: Prisma.task_dependenciesWhereUniqueInput
  update: Prisma.XOR<Prisma.task_dependenciesUpdateWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput, Prisma.task_dependenciesUncheckedUpdateWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput>
  create: Prisma.XOR<Prisma.task_dependenciesCreateWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput, Prisma.task_dependenciesUncheckedCreateWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput>
}

export type task_dependenciesUpdateWithWhereUniqueWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput = {
  where: Prisma.task_dependenciesWhereUniqueInput
  data: Prisma.XOR<Prisma.task_dependenciesUpdateWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput, Prisma.task_dependenciesUncheckedUpdateWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput>
}

export type task_dependenciesUpdateManyWithWhereWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput = {
  where: Prisma.task_dependenciesScalarWhereInput
  data: Prisma.XOR<Prisma.task_dependenciesUpdateManyMutationInput, Prisma.task_dependenciesUncheckedUpdateManyWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput>
}

export type task_dependenciesScalarWhereInput = {
  AND?: Prisma.task_dependenciesScalarWhereInput | Prisma.task_dependenciesScalarWhereInput[]
  OR?: Prisma.task_dependenciesScalarWhereInput[]
  NOT?: Prisma.task_dependenciesScalarWhereInput | Prisma.task_dependenciesScalarWhereInput[]
  id?: Prisma.StringFilter<"task_dependencies"> | string
  taskId?: Prisma.StringFilter<"task_dependencies"> | string
  dependsOnTaskId?: Prisma.StringFilter<"task_dependencies"> | string
  createdAt?: Prisma.DateTimeFilter<"task_dependencies"> | Date | string
}

export type task_dependenciesUpsertWithWhereUniqueWithoutTasks_task_dependencies_taskIdTotasksInput = {
  where: Prisma.task_dependenciesWhereUniqueInput
  update: Prisma.XOR<Prisma.task_dependenciesUpdateWithoutTasks_task_dependencies_taskIdTotasksInput, Prisma.task_dependenciesUncheckedUpdateWithoutTasks_task_dependencies_taskIdTotasksInput>
  create: Prisma.XOR<Prisma.task_dependenciesCreateWithoutTasks_task_dependencies_taskIdTotasksInput, Prisma.task_dependenciesUncheckedCreateWithoutTasks_task_dependencies_taskIdTotasksInput>
}

export type task_dependenciesUpdateWithWhereUniqueWithoutTasks_task_dependencies_taskIdTotasksInput = {
  where: Prisma.task_dependenciesWhereUniqueInput
  data: Prisma.XOR<Prisma.task_dependenciesUpdateWithoutTasks_task_dependencies_taskIdTotasksInput, Prisma.task_dependenciesUncheckedUpdateWithoutTasks_task_dependencies_taskIdTotasksInput>
}

export type task_dependenciesUpdateManyWithWhereWithoutTasks_task_dependencies_taskIdTotasksInput = {
  where: Prisma.task_dependenciesScalarWhereInput
  data: Prisma.XOR<Prisma.task_dependenciesUpdateManyMutationInput, Prisma.task_dependenciesUncheckedUpdateManyWithoutTasks_task_dependencies_taskIdTotasksInput>
}

export type task_dependenciesCreateManyTasks_task_dependencies_dependsOnTaskIdTotasksInput = {
  id: string
  taskId: string
  createdAt?: Date | string
}

export type task_dependenciesCreateManyTasks_task_dependencies_taskIdTotasksInput = {
  id: string
  dependsOnTaskId: string
  createdAt?: Date | string
}

export type task_dependenciesUpdateWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tasks_task_dependencies_taskIdTotasks?: Prisma.tasksUpdateOneRequiredWithoutTask_dependencies_task_dependencies_taskIdTotasksNestedInput
}

export type task_dependenciesUncheckedUpdateWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  taskId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type task_dependenciesUncheckedUpdateManyWithoutTasks_task_dependencies_dependsOnTaskIdTotasksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  taskId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type task_dependenciesUpdateWithoutTasks_task_dependencies_taskIdTotasksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tasks_task_dependencies_dependsOnTaskIdTotasks?: Prisma.tasksUpdateOneRequiredWithoutTask_dependencies_task_dependencies_dependsOnTaskIdTotasksNestedInput
}

export type task_dependenciesUncheckedUpdateWithoutTasks_task_dependencies_taskIdTotasksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dependsOnTaskId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type task_dependenciesUncheckedUpdateManyWithoutTasks_task_dependencies_taskIdTotasksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dependsOnTaskId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type task_dependenciesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  taskId?: boolean
  dependsOnTaskId?: boolean
  createdAt?: boolean
  tasks_task_dependencies_dependsOnTaskIdTotasks?: boolean | Prisma.tasksDefaultArgs<ExtArgs>
  tasks_task_dependencies_taskIdTotasks?: boolean | Prisma.tasksDefaultArgs<ExtArgs>
}, ExtArgs["result"]["task_dependencies"]>

export type task_dependenciesSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  taskId?: boolean
  dependsOnTaskId?: boolean
  createdAt?: boolean
  tasks_task_dependencies_dependsOnTaskIdTotasks?: boolean | Prisma.tasksDefaultArgs<ExtArgs>
  tasks_task_dependencies_taskIdTotasks?: boolean | Prisma.tasksDefaultArgs<ExtArgs>
}, ExtArgs["result"]["task_dependencies"]>

export type task_dependenciesSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  taskId?: boolean
  dependsOnTaskId?: boolean
  createdAt?: boolean
  tasks_task_dependencies_dependsOnTaskIdTotasks?: boolean | Prisma.tasksDefaultArgs<ExtArgs>
  tasks_task_dependencies_taskIdTotasks?: boolean | Prisma.tasksDefaultArgs<ExtArgs>
}, ExtArgs["result"]["task_dependencies"]>

export type task_dependenciesSelectScalar = {
  id?: boolean
  taskId?: boolean
  dependsOnTaskId?: boolean
  createdAt?: boolean
}

export type task_dependenciesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "taskId" | "dependsOnTaskId" | "createdAt", ExtArgs["result"]["task_dependencies"]>
export type task_dependenciesInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tasks_task_dependencies_dependsOnTaskIdTotasks?: boolean | Prisma.tasksDefaultArgs<ExtArgs>
  tasks_task_dependencies_taskIdTotasks?: boolean | Prisma.tasksDefaultArgs<ExtArgs>
}
export type task_dependenciesIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tasks_task_dependencies_dependsOnTaskIdTotasks?: boolean | Prisma.tasksDefaultArgs<ExtArgs>
  tasks_task_dependencies_taskIdTotasks?: boolean | Prisma.tasksDefaultArgs<ExtArgs>
}
export type task_dependenciesIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tasks_task_dependencies_dependsOnTaskIdTotasks?: boolean | Prisma.tasksDefaultArgs<ExtArgs>
  tasks_task_dependencies_taskIdTotasks?: boolean | Prisma.tasksDefaultArgs<ExtArgs>
}

export type $task_dependenciesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "task_dependencies"
  objects: {
    tasks_task_dependencies_dependsOnTaskIdTotasks: Prisma.$tasksPayload<ExtArgs>
    tasks_task_dependencies_taskIdTotasks: Prisma.$tasksPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    taskId: string
    dependsOnTaskId: string
    createdAt: Date
  }, ExtArgs["result"]["task_dependencies"]>
  composites: {}
}

export type task_dependenciesGetPayload<S extends boolean | null | undefined | task_dependenciesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$task_dependenciesPayload, S>

export type task_dependenciesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<task_dependenciesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Task_dependenciesCountAggregateInputType | true
  }

export interface task_dependenciesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['task_dependencies'], meta: { name: 'task_dependencies' } }
  /**
   * Find zero or one Task_dependencies that matches the filter.
   * @param {task_dependenciesFindUniqueArgs} args - Arguments to find a Task_dependencies
   * @example
   * // Get one Task_dependencies
   * const task_dependencies = await prisma.task_dependencies.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends task_dependenciesFindUniqueArgs>(args: Prisma.SelectSubset<T, task_dependenciesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__task_dependenciesClient<runtime.Types.Result.GetResult<Prisma.$task_dependenciesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Task_dependencies that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {task_dependenciesFindUniqueOrThrowArgs} args - Arguments to find a Task_dependencies
   * @example
   * // Get one Task_dependencies
   * const task_dependencies = await prisma.task_dependencies.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends task_dependenciesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, task_dependenciesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__task_dependenciesClient<runtime.Types.Result.GetResult<Prisma.$task_dependenciesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Task_dependencies that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {task_dependenciesFindFirstArgs} args - Arguments to find a Task_dependencies
   * @example
   * // Get one Task_dependencies
   * const task_dependencies = await prisma.task_dependencies.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends task_dependenciesFindFirstArgs>(args?: Prisma.SelectSubset<T, task_dependenciesFindFirstArgs<ExtArgs>>): Prisma.Prisma__task_dependenciesClient<runtime.Types.Result.GetResult<Prisma.$task_dependenciesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Task_dependencies that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {task_dependenciesFindFirstOrThrowArgs} args - Arguments to find a Task_dependencies
   * @example
   * // Get one Task_dependencies
   * const task_dependencies = await prisma.task_dependencies.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends task_dependenciesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, task_dependenciesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__task_dependenciesClient<runtime.Types.Result.GetResult<Prisma.$task_dependenciesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Task_dependencies that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {task_dependenciesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Task_dependencies
   * const task_dependencies = await prisma.task_dependencies.findMany()
   * 
   * // Get first 10 Task_dependencies
   * const task_dependencies = await prisma.task_dependencies.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const task_dependenciesWithIdOnly = await prisma.task_dependencies.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends task_dependenciesFindManyArgs>(args?: Prisma.SelectSubset<T, task_dependenciesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$task_dependenciesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Task_dependencies.
   * @param {task_dependenciesCreateArgs} args - Arguments to create a Task_dependencies.
   * @example
   * // Create one Task_dependencies
   * const Task_dependencies = await prisma.task_dependencies.create({
   *   data: {
   *     // ... data to create a Task_dependencies
   *   }
   * })
   * 
   */
  create<T extends task_dependenciesCreateArgs>(args: Prisma.SelectSubset<T, task_dependenciesCreateArgs<ExtArgs>>): Prisma.Prisma__task_dependenciesClient<runtime.Types.Result.GetResult<Prisma.$task_dependenciesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Task_dependencies.
   * @param {task_dependenciesCreateManyArgs} args - Arguments to create many Task_dependencies.
   * @example
   * // Create many Task_dependencies
   * const task_dependencies = await prisma.task_dependencies.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends task_dependenciesCreateManyArgs>(args?: Prisma.SelectSubset<T, task_dependenciesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Task_dependencies and returns the data saved in the database.
   * @param {task_dependenciesCreateManyAndReturnArgs} args - Arguments to create many Task_dependencies.
   * @example
   * // Create many Task_dependencies
   * const task_dependencies = await prisma.task_dependencies.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Task_dependencies and only return the `id`
   * const task_dependenciesWithIdOnly = await prisma.task_dependencies.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends task_dependenciesCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, task_dependenciesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$task_dependenciesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Task_dependencies.
   * @param {task_dependenciesDeleteArgs} args - Arguments to delete one Task_dependencies.
   * @example
   * // Delete one Task_dependencies
   * const Task_dependencies = await prisma.task_dependencies.delete({
   *   where: {
   *     // ... filter to delete one Task_dependencies
   *   }
   * })
   * 
   */
  delete<T extends task_dependenciesDeleteArgs>(args: Prisma.SelectSubset<T, task_dependenciesDeleteArgs<ExtArgs>>): Prisma.Prisma__task_dependenciesClient<runtime.Types.Result.GetResult<Prisma.$task_dependenciesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Task_dependencies.
   * @param {task_dependenciesUpdateArgs} args - Arguments to update one Task_dependencies.
   * @example
   * // Update one Task_dependencies
   * const task_dependencies = await prisma.task_dependencies.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends task_dependenciesUpdateArgs>(args: Prisma.SelectSubset<T, task_dependenciesUpdateArgs<ExtArgs>>): Prisma.Prisma__task_dependenciesClient<runtime.Types.Result.GetResult<Prisma.$task_dependenciesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Task_dependencies.
   * @param {task_dependenciesDeleteManyArgs} args - Arguments to filter Task_dependencies to delete.
   * @example
   * // Delete a few Task_dependencies
   * const { count } = await prisma.task_dependencies.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends task_dependenciesDeleteManyArgs>(args?: Prisma.SelectSubset<T, task_dependenciesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Task_dependencies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {task_dependenciesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Task_dependencies
   * const task_dependencies = await prisma.task_dependencies.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends task_dependenciesUpdateManyArgs>(args: Prisma.SelectSubset<T, task_dependenciesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Task_dependencies and returns the data updated in the database.
   * @param {task_dependenciesUpdateManyAndReturnArgs} args - Arguments to update many Task_dependencies.
   * @example
   * // Update many Task_dependencies
   * const task_dependencies = await prisma.task_dependencies.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Task_dependencies and only return the `id`
   * const task_dependenciesWithIdOnly = await prisma.task_dependencies.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends task_dependenciesUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, task_dependenciesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$task_dependenciesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Task_dependencies.
   * @param {task_dependenciesUpsertArgs} args - Arguments to update or create a Task_dependencies.
   * @example
   * // Update or create a Task_dependencies
   * const task_dependencies = await prisma.task_dependencies.upsert({
   *   create: {
   *     // ... data to create a Task_dependencies
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Task_dependencies we want to update
   *   }
   * })
   */
  upsert<T extends task_dependenciesUpsertArgs>(args: Prisma.SelectSubset<T, task_dependenciesUpsertArgs<ExtArgs>>): Prisma.Prisma__task_dependenciesClient<runtime.Types.Result.GetResult<Prisma.$task_dependenciesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Task_dependencies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {task_dependenciesCountArgs} args - Arguments to filter Task_dependencies to count.
   * @example
   * // Count the number of Task_dependencies
   * const count = await prisma.task_dependencies.count({
   *   where: {
   *     // ... the filter for the Task_dependencies we want to count
   *   }
   * })
  **/
  count<T extends task_dependenciesCountArgs>(
    args?: Prisma.Subset<T, task_dependenciesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Task_dependenciesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Task_dependencies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Task_dependenciesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Task_dependenciesAggregateArgs>(args: Prisma.Subset<T, Task_dependenciesAggregateArgs>): Prisma.PrismaPromise<GetTask_dependenciesAggregateType<T>>

  /**
   * Group by Task_dependencies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {task_dependenciesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends task_dependenciesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: task_dependenciesGroupByArgs['orderBy'] }
      : { orderBy?: task_dependenciesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, task_dependenciesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTask_dependenciesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the task_dependencies model
 */
readonly fields: task_dependenciesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for task_dependencies.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__task_dependenciesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  tasks_task_dependencies_dependsOnTaskIdTotasks<T extends Prisma.tasksDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.tasksDefaultArgs<ExtArgs>>): Prisma.Prisma__tasksClient<runtime.Types.Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  tasks_task_dependencies_taskIdTotasks<T extends Prisma.tasksDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.tasksDefaultArgs<ExtArgs>>): Prisma.Prisma__tasksClient<runtime.Types.Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the task_dependencies model
 */
export interface task_dependenciesFieldRefs {
  readonly id: Prisma.FieldRef<"task_dependencies", 'String'>
  readonly taskId: Prisma.FieldRef<"task_dependencies", 'String'>
  readonly dependsOnTaskId: Prisma.FieldRef<"task_dependencies", 'String'>
  readonly createdAt: Prisma.FieldRef<"task_dependencies", 'DateTime'>
}
    

// Custom InputTypes
/**
 * task_dependencies findUnique
 */
export type task_dependenciesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the task_dependencies
   */
  select?: Prisma.task_dependenciesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the task_dependencies
   */
  omit?: Prisma.task_dependenciesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.task_dependenciesInclude<ExtArgs> | null
  /**
   * Filter, which task_dependencies to fetch.
   */
  where: Prisma.task_dependenciesWhereUniqueInput
}

/**
 * task_dependencies findUniqueOrThrow
 */
export type task_dependenciesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the task_dependencies
   */
  select?: Prisma.task_dependenciesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the task_dependencies
   */
  omit?: Prisma.task_dependenciesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.task_dependenciesInclude<ExtArgs> | null
  /**
   * Filter, which task_dependencies to fetch.
   */
  where: Prisma.task_dependenciesWhereUniqueInput
}

/**
 * task_dependencies findFirst
 */
export type task_dependenciesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the task_dependencies
   */
  select?: Prisma.task_dependenciesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the task_dependencies
   */
  omit?: Prisma.task_dependenciesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.task_dependenciesInclude<ExtArgs> | null
  /**
   * Filter, which task_dependencies to fetch.
   */
  where?: Prisma.task_dependenciesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of task_dependencies to fetch.
   */
  orderBy?: Prisma.task_dependenciesOrderByWithRelationInput | Prisma.task_dependenciesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for task_dependencies.
   */
  cursor?: Prisma.task_dependenciesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` task_dependencies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` task_dependencies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of task_dependencies.
   */
  distinct?: Prisma.Task_dependenciesScalarFieldEnum | Prisma.Task_dependenciesScalarFieldEnum[]
}

/**
 * task_dependencies findFirstOrThrow
 */
export type task_dependenciesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the task_dependencies
   */
  select?: Prisma.task_dependenciesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the task_dependencies
   */
  omit?: Prisma.task_dependenciesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.task_dependenciesInclude<ExtArgs> | null
  /**
   * Filter, which task_dependencies to fetch.
   */
  where?: Prisma.task_dependenciesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of task_dependencies to fetch.
   */
  orderBy?: Prisma.task_dependenciesOrderByWithRelationInput | Prisma.task_dependenciesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for task_dependencies.
   */
  cursor?: Prisma.task_dependenciesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` task_dependencies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` task_dependencies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of task_dependencies.
   */
  distinct?: Prisma.Task_dependenciesScalarFieldEnum | Prisma.Task_dependenciesScalarFieldEnum[]
}

/**
 * task_dependencies findMany
 */
export type task_dependenciesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the task_dependencies
   */
  select?: Prisma.task_dependenciesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the task_dependencies
   */
  omit?: Prisma.task_dependenciesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.task_dependenciesInclude<ExtArgs> | null
  /**
   * Filter, which task_dependencies to fetch.
   */
  where?: Prisma.task_dependenciesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of task_dependencies to fetch.
   */
  orderBy?: Prisma.task_dependenciesOrderByWithRelationInput | Prisma.task_dependenciesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing task_dependencies.
   */
  cursor?: Prisma.task_dependenciesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` task_dependencies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` task_dependencies.
   */
  skip?: number
  distinct?: Prisma.Task_dependenciesScalarFieldEnum | Prisma.Task_dependenciesScalarFieldEnum[]
}

/**
 * task_dependencies create
 */
export type task_dependenciesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the task_dependencies
   */
  select?: Prisma.task_dependenciesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the task_dependencies
   */
  omit?: Prisma.task_dependenciesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.task_dependenciesInclude<ExtArgs> | null
  /**
   * The data needed to create a task_dependencies.
   */
  data: Prisma.XOR<Prisma.task_dependenciesCreateInput, Prisma.task_dependenciesUncheckedCreateInput>
}

/**
 * task_dependencies createMany
 */
export type task_dependenciesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many task_dependencies.
   */
  data: Prisma.task_dependenciesCreateManyInput | Prisma.task_dependenciesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * task_dependencies createManyAndReturn
 */
export type task_dependenciesCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the task_dependencies
   */
  select?: Prisma.task_dependenciesSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the task_dependencies
   */
  omit?: Prisma.task_dependenciesOmit<ExtArgs> | null
  /**
   * The data used to create many task_dependencies.
   */
  data: Prisma.task_dependenciesCreateManyInput | Prisma.task_dependenciesCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.task_dependenciesIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * task_dependencies update
 */
export type task_dependenciesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the task_dependencies
   */
  select?: Prisma.task_dependenciesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the task_dependencies
   */
  omit?: Prisma.task_dependenciesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.task_dependenciesInclude<ExtArgs> | null
  /**
   * The data needed to update a task_dependencies.
   */
  data: Prisma.XOR<Prisma.task_dependenciesUpdateInput, Prisma.task_dependenciesUncheckedUpdateInput>
  /**
   * Choose, which task_dependencies to update.
   */
  where: Prisma.task_dependenciesWhereUniqueInput
}

/**
 * task_dependencies updateMany
 */
export type task_dependenciesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update task_dependencies.
   */
  data: Prisma.XOR<Prisma.task_dependenciesUpdateManyMutationInput, Prisma.task_dependenciesUncheckedUpdateManyInput>
  /**
   * Filter which task_dependencies to update
   */
  where?: Prisma.task_dependenciesWhereInput
  /**
   * Limit how many task_dependencies to update.
   */
  limit?: number
}

/**
 * task_dependencies updateManyAndReturn
 */
export type task_dependenciesUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the task_dependencies
   */
  select?: Prisma.task_dependenciesSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the task_dependencies
   */
  omit?: Prisma.task_dependenciesOmit<ExtArgs> | null
  /**
   * The data used to update task_dependencies.
   */
  data: Prisma.XOR<Prisma.task_dependenciesUpdateManyMutationInput, Prisma.task_dependenciesUncheckedUpdateManyInput>
  /**
   * Filter which task_dependencies to update
   */
  where?: Prisma.task_dependenciesWhereInput
  /**
   * Limit how many task_dependencies to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.task_dependenciesIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * task_dependencies upsert
 */
export type task_dependenciesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the task_dependencies
   */
  select?: Prisma.task_dependenciesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the task_dependencies
   */
  omit?: Prisma.task_dependenciesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.task_dependenciesInclude<ExtArgs> | null
  /**
   * The filter to search for the task_dependencies to update in case it exists.
   */
  where: Prisma.task_dependenciesWhereUniqueInput
  /**
   * In case the task_dependencies found by the `where` argument doesn't exist, create a new task_dependencies with this data.
   */
  create: Prisma.XOR<Prisma.task_dependenciesCreateInput, Prisma.task_dependenciesUncheckedCreateInput>
  /**
   * In case the task_dependencies was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.task_dependenciesUpdateInput, Prisma.task_dependenciesUncheckedUpdateInput>
}

/**
 * task_dependencies delete
 */
export type task_dependenciesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the task_dependencies
   */
  select?: Prisma.task_dependenciesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the task_dependencies
   */
  omit?: Prisma.task_dependenciesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.task_dependenciesInclude<ExtArgs> | null
  /**
   * Filter which task_dependencies to delete.
   */
  where: Prisma.task_dependenciesWhereUniqueInput
}

/**
 * task_dependencies deleteMany
 */
export type task_dependenciesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which task_dependencies to delete
   */
  where?: Prisma.task_dependenciesWhereInput
  /**
   * Limit how many task_dependencies to delete.
   */
  limit?: number
}

/**
 * task_dependencies without action
 */
export type task_dependenciesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the task_dependencies
   */
  select?: Prisma.task_dependenciesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the task_dependencies
   */
  omit?: Prisma.task_dependenciesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.task_dependenciesInclude<ExtArgs> | null
}
