
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TaskDependency` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TaskDependency
 * 
 */
export type TaskDependencyModel = runtime.Types.Result.DefaultSelection<Prisma.$TaskDependencyPayload>

export type AggregateTaskDependency = {
  _count: TaskDependencyCountAggregateOutputType | null
  _min: TaskDependencyMinAggregateOutputType | null
  _max: TaskDependencyMaxAggregateOutputType | null
}

export type TaskDependencyMinAggregateOutputType = {
  id: string | null
  taskId: string | null
  dependsOnTaskId: string | null
  createdAt: Date | null
}

export type TaskDependencyMaxAggregateOutputType = {
  id: string | null
  taskId: string | null
  dependsOnTaskId: string | null
  createdAt: Date | null
}

export type TaskDependencyCountAggregateOutputType = {
  id: number
  taskId: number
  dependsOnTaskId: number
  createdAt: number
  _all: number
}


export type TaskDependencyMinAggregateInputType = {
  id?: true
  taskId?: true
  dependsOnTaskId?: true
  createdAt?: true
}

export type TaskDependencyMaxAggregateInputType = {
  id?: true
  taskId?: true
  dependsOnTaskId?: true
  createdAt?: true
}

export type TaskDependencyCountAggregateInputType = {
  id?: true
  taskId?: true
  dependsOnTaskId?: true
  createdAt?: true
  _all?: true
}

export type TaskDependencyAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TaskDependency to aggregate.
   */
  where?: Prisma.TaskDependencyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TaskDependencies to fetch.
   */
  orderBy?: Prisma.TaskDependencyOrderByWithRelationInput | Prisma.TaskDependencyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TaskDependencyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TaskDependencies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TaskDependencies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TaskDependencies
  **/
  _count?: true | TaskDependencyCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TaskDependencyMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TaskDependencyMaxAggregateInputType
}

export type GetTaskDependencyAggregateType<T extends TaskDependencyAggregateArgs> = {
      [P in keyof T & keyof AggregateTaskDependency]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTaskDependency[P]>
    : Prisma.GetScalarType<T[P], AggregateTaskDependency[P]>
}




export type TaskDependencyGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TaskDependencyWhereInput
  orderBy?: Prisma.TaskDependencyOrderByWithAggregationInput | Prisma.TaskDependencyOrderByWithAggregationInput[]
  by: Prisma.TaskDependencyScalarFieldEnum[] | Prisma.TaskDependencyScalarFieldEnum
  having?: Prisma.TaskDependencyScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TaskDependencyCountAggregateInputType | true
  _min?: TaskDependencyMinAggregateInputType
  _max?: TaskDependencyMaxAggregateInputType
}

export type TaskDependencyGroupByOutputType = {
  id: string
  taskId: string
  dependsOnTaskId: string
  createdAt: Date
  _count: TaskDependencyCountAggregateOutputType | null
  _min: TaskDependencyMinAggregateOutputType | null
  _max: TaskDependencyMaxAggregateOutputType | null
}

type GetTaskDependencyGroupByPayload<T extends TaskDependencyGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TaskDependencyGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TaskDependencyGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TaskDependencyGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TaskDependencyGroupByOutputType[P]>
      }
    >
  > 



export type TaskDependencyWhereInput = {
  AND?: Prisma.TaskDependencyWhereInput | Prisma.TaskDependencyWhereInput[]
  OR?: Prisma.TaskDependencyWhereInput[]
  NOT?: Prisma.TaskDependencyWhereInput | Prisma.TaskDependencyWhereInput[]
  id?: Prisma.StringFilter<"TaskDependency"> | string
  taskId?: Prisma.StringFilter<"TaskDependency"> | string
  dependsOnTaskId?: Prisma.StringFilter<"TaskDependency"> | string
  createdAt?: Prisma.DateTimeFilter<"TaskDependency"> | Date | string
  dependsOnTask?: Prisma.XOR<Prisma.TaskScalarRelationFilter, Prisma.TaskWhereInput>
  task?: Prisma.XOR<Prisma.TaskScalarRelationFilter, Prisma.TaskWhereInput>
}

export type TaskDependencyOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  taskId?: Prisma.SortOrder
  dependsOnTaskId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  dependsOnTask?: Prisma.TaskOrderByWithRelationInput
  task?: Prisma.TaskOrderByWithRelationInput
}

export type TaskDependencyWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.TaskDependencyWhereInput | Prisma.TaskDependencyWhereInput[]
  OR?: Prisma.TaskDependencyWhereInput[]
  NOT?: Prisma.TaskDependencyWhereInput | Prisma.TaskDependencyWhereInput[]
  taskId?: Prisma.StringFilter<"TaskDependency"> | string
  dependsOnTaskId?: Prisma.StringFilter<"TaskDependency"> | string
  createdAt?: Prisma.DateTimeFilter<"TaskDependency"> | Date | string
  dependsOnTask?: Prisma.XOR<Prisma.TaskScalarRelationFilter, Prisma.TaskWhereInput>
  task?: Prisma.XOR<Prisma.TaskScalarRelationFilter, Prisma.TaskWhereInput>
}, "id">

export type TaskDependencyOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  taskId?: Prisma.SortOrder
  dependsOnTaskId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.TaskDependencyCountOrderByAggregateInput
  _max?: Prisma.TaskDependencyMaxOrderByAggregateInput
  _min?: Prisma.TaskDependencyMinOrderByAggregateInput
}

export type TaskDependencyScalarWhereWithAggregatesInput = {
  AND?: Prisma.TaskDependencyScalarWhereWithAggregatesInput | Prisma.TaskDependencyScalarWhereWithAggregatesInput[]
  OR?: Prisma.TaskDependencyScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TaskDependencyScalarWhereWithAggregatesInput | Prisma.TaskDependencyScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"TaskDependency"> | string
  taskId?: Prisma.StringWithAggregatesFilter<"TaskDependency"> | string
  dependsOnTaskId?: Prisma.StringWithAggregatesFilter<"TaskDependency"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"TaskDependency"> | Date | string
}

export type TaskDependencyCreateInput = {
  id?: string
  createdAt?: Date | string
  dependsOnTask: Prisma.TaskCreateNestedOneWithoutDependentTasksInput
  task: Prisma.TaskCreateNestedOneWithoutDependenciesInput
}

export type TaskDependencyUncheckedCreateInput = {
  id?: string
  taskId: string
  dependsOnTaskId: string
  createdAt?: Date | string
}

export type TaskDependencyUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dependsOnTask?: Prisma.TaskUpdateOneRequiredWithoutDependentTasksNestedInput
  task?: Prisma.TaskUpdateOneRequiredWithoutDependenciesNestedInput
}

export type TaskDependencyUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  taskId?: Prisma.StringFieldUpdateOperationsInput | string
  dependsOnTaskId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TaskDependencyCreateManyInput = {
  id?: string
  taskId: string
  dependsOnTaskId: string
  createdAt?: Date | string
}

export type TaskDependencyUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TaskDependencyUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  taskId?: Prisma.StringFieldUpdateOperationsInput | string
  dependsOnTaskId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TaskDependencyListRelationFilter = {
  every?: Prisma.TaskDependencyWhereInput
  some?: Prisma.TaskDependencyWhereInput
  none?: Prisma.TaskDependencyWhereInput
}

export type TaskDependencyOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TaskDependencyCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  taskId?: Prisma.SortOrder
  dependsOnTaskId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type TaskDependencyMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  taskId?: Prisma.SortOrder
  dependsOnTaskId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type TaskDependencyMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  taskId?: Prisma.SortOrder
  dependsOnTaskId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type TaskDependencyCreateNestedManyWithoutDependsOnTaskInput = {
  create?: Prisma.XOR<Prisma.TaskDependencyCreateWithoutDependsOnTaskInput, Prisma.TaskDependencyUncheckedCreateWithoutDependsOnTaskInput> | Prisma.TaskDependencyCreateWithoutDependsOnTaskInput[] | Prisma.TaskDependencyUncheckedCreateWithoutDependsOnTaskInput[]
  connectOrCreate?: Prisma.TaskDependencyCreateOrConnectWithoutDependsOnTaskInput | Prisma.TaskDependencyCreateOrConnectWithoutDependsOnTaskInput[]
  createMany?: Prisma.TaskDependencyCreateManyDependsOnTaskInputEnvelope
  connect?: Prisma.TaskDependencyWhereUniqueInput | Prisma.TaskDependencyWhereUniqueInput[]
}

export type TaskDependencyCreateNestedManyWithoutTaskInput = {
  create?: Prisma.XOR<Prisma.TaskDependencyCreateWithoutTaskInput, Prisma.TaskDependencyUncheckedCreateWithoutTaskInput> | Prisma.TaskDependencyCreateWithoutTaskInput[] | Prisma.TaskDependencyUncheckedCreateWithoutTaskInput[]
  connectOrCreate?: Prisma.TaskDependencyCreateOrConnectWithoutTaskInput | Prisma.TaskDependencyCreateOrConnectWithoutTaskInput[]
  createMany?: Prisma.TaskDependencyCreateManyTaskInputEnvelope
  connect?: Prisma.TaskDependencyWhereUniqueInput | Prisma.TaskDependencyWhereUniqueInput[]
}

export type TaskDependencyUncheckedCreateNestedManyWithoutDependsOnTaskInput = {
  create?: Prisma.XOR<Prisma.TaskDependencyCreateWithoutDependsOnTaskInput, Prisma.TaskDependencyUncheckedCreateWithoutDependsOnTaskInput> | Prisma.TaskDependencyCreateWithoutDependsOnTaskInput[] | Prisma.TaskDependencyUncheckedCreateWithoutDependsOnTaskInput[]
  connectOrCreate?: Prisma.TaskDependencyCreateOrConnectWithoutDependsOnTaskInput | Prisma.TaskDependencyCreateOrConnectWithoutDependsOnTaskInput[]
  createMany?: Prisma.TaskDependencyCreateManyDependsOnTaskInputEnvelope
  connect?: Prisma.TaskDependencyWhereUniqueInput | Prisma.TaskDependencyWhereUniqueInput[]
}

export type TaskDependencyUncheckedCreateNestedManyWithoutTaskInput = {
  create?: Prisma.XOR<Prisma.TaskDependencyCreateWithoutTaskInput, Prisma.TaskDependencyUncheckedCreateWithoutTaskInput> | Prisma.TaskDependencyCreateWithoutTaskInput[] | Prisma.TaskDependencyUncheckedCreateWithoutTaskInput[]
  connectOrCreate?: Prisma.TaskDependencyCreateOrConnectWithoutTaskInput | Prisma.TaskDependencyCreateOrConnectWithoutTaskInput[]
  createMany?: Prisma.TaskDependencyCreateManyTaskInputEnvelope
  connect?: Prisma.TaskDependencyWhereUniqueInput | Prisma.TaskDependencyWhereUniqueInput[]
}

export type TaskDependencyUpdateManyWithoutDependsOnTaskNestedInput = {
  create?: Prisma.XOR<Prisma.TaskDependencyCreateWithoutDependsOnTaskInput, Prisma.TaskDependencyUncheckedCreateWithoutDependsOnTaskInput> | Prisma.TaskDependencyCreateWithoutDependsOnTaskInput[] | Prisma.TaskDependencyUncheckedCreateWithoutDependsOnTaskInput[]
  connectOrCreate?: Prisma.TaskDependencyCreateOrConnectWithoutDependsOnTaskInput | Prisma.TaskDependencyCreateOrConnectWithoutDependsOnTaskInput[]
  upsert?: Prisma.TaskDependencyUpsertWithWhereUniqueWithoutDependsOnTaskInput | Prisma.TaskDependencyUpsertWithWhereUniqueWithoutDependsOnTaskInput[]
  createMany?: Prisma.TaskDependencyCreateManyDependsOnTaskInputEnvelope
  set?: Prisma.TaskDependencyWhereUniqueInput | Prisma.TaskDependencyWhereUniqueInput[]
  disconnect?: Prisma.TaskDependencyWhereUniqueInput | Prisma.TaskDependencyWhereUniqueInput[]
  delete?: Prisma.TaskDependencyWhereUniqueInput | Prisma.TaskDependencyWhereUniqueInput[]
  connect?: Prisma.TaskDependencyWhereUniqueInput | Prisma.TaskDependencyWhereUniqueInput[]
  update?: Prisma.TaskDependencyUpdateWithWhereUniqueWithoutDependsOnTaskInput | Prisma.TaskDependencyUpdateWithWhereUniqueWithoutDependsOnTaskInput[]
  updateMany?: Prisma.TaskDependencyUpdateManyWithWhereWithoutDependsOnTaskInput | Prisma.TaskDependencyUpdateManyWithWhereWithoutDependsOnTaskInput[]
  deleteMany?: Prisma.TaskDependencyScalarWhereInput | Prisma.TaskDependencyScalarWhereInput[]
}

export type TaskDependencyUpdateManyWithoutTaskNestedInput = {
  create?: Prisma.XOR<Prisma.TaskDependencyCreateWithoutTaskInput, Prisma.TaskDependencyUncheckedCreateWithoutTaskInput> | Prisma.TaskDependencyCreateWithoutTaskInput[] | Prisma.TaskDependencyUncheckedCreateWithoutTaskInput[]
  connectOrCreate?: Prisma.TaskDependencyCreateOrConnectWithoutTaskInput | Prisma.TaskDependencyCreateOrConnectWithoutTaskInput[]
  upsert?: Prisma.TaskDependencyUpsertWithWhereUniqueWithoutTaskInput | Prisma.TaskDependencyUpsertWithWhereUniqueWithoutTaskInput[]
  createMany?: Prisma.TaskDependencyCreateManyTaskInputEnvelope
  set?: Prisma.TaskDependencyWhereUniqueInput | Prisma.TaskDependencyWhereUniqueInput[]
  disconnect?: Prisma.TaskDependencyWhereUniqueInput | Prisma.TaskDependencyWhereUniqueInput[]
  delete?: Prisma.TaskDependencyWhereUniqueInput | Prisma.TaskDependencyWhereUniqueInput[]
  connect?: Prisma.TaskDependencyWhereUniqueInput | Prisma.TaskDependencyWhereUniqueInput[]
  update?: Prisma.TaskDependencyUpdateWithWhereUniqueWithoutTaskInput | Prisma.TaskDependencyUpdateWithWhereUniqueWithoutTaskInput[]
  updateMany?: Prisma.TaskDependencyUpdateManyWithWhereWithoutTaskInput | Prisma.TaskDependencyUpdateManyWithWhereWithoutTaskInput[]
  deleteMany?: Prisma.TaskDependencyScalarWhereInput | Prisma.TaskDependencyScalarWhereInput[]
}

export type TaskDependencyUncheckedUpdateManyWithoutDependsOnTaskNestedInput = {
  create?: Prisma.XOR<Prisma.TaskDependencyCreateWithoutDependsOnTaskInput, Prisma.TaskDependencyUncheckedCreateWithoutDependsOnTaskInput> | Prisma.TaskDependencyCreateWithoutDependsOnTaskInput[] | Prisma.TaskDependencyUncheckedCreateWithoutDependsOnTaskInput[]
  connectOrCreate?: Prisma.TaskDependencyCreateOrConnectWithoutDependsOnTaskInput | Prisma.TaskDependencyCreateOrConnectWithoutDependsOnTaskInput[]
  upsert?: Prisma.TaskDependencyUpsertWithWhereUniqueWithoutDependsOnTaskInput | Prisma.TaskDependencyUpsertWithWhereUniqueWithoutDependsOnTaskInput[]
  createMany?: Prisma.TaskDependencyCreateManyDependsOnTaskInputEnvelope
  set?: Prisma.TaskDependencyWhereUniqueInput | Prisma.TaskDependencyWhereUniqueInput[]
  disconnect?: Prisma.TaskDependencyWhereUniqueInput | Prisma.TaskDependencyWhereUniqueInput[]
  delete?: Prisma.TaskDependencyWhereUniqueInput | Prisma.TaskDependencyWhereUniqueInput[]
  connect?: Prisma.TaskDependencyWhereUniqueInput | Prisma.TaskDependencyWhereUniqueInput[]
  update?: Prisma.TaskDependencyUpdateWithWhereUniqueWithoutDependsOnTaskInput | Prisma.TaskDependencyUpdateWithWhereUniqueWithoutDependsOnTaskInput[]
  updateMany?: Prisma.TaskDependencyUpdateManyWithWhereWithoutDependsOnTaskInput | Prisma.TaskDependencyUpdateManyWithWhereWithoutDependsOnTaskInput[]
  deleteMany?: Prisma.TaskDependencyScalarWhereInput | Prisma.TaskDependencyScalarWhereInput[]
}

export type TaskDependencyUncheckedUpdateManyWithoutTaskNestedInput = {
  create?: Prisma.XOR<Prisma.TaskDependencyCreateWithoutTaskInput, Prisma.TaskDependencyUncheckedCreateWithoutTaskInput> | Prisma.TaskDependencyCreateWithoutTaskInput[] | Prisma.TaskDependencyUncheckedCreateWithoutTaskInput[]
  connectOrCreate?: Prisma.TaskDependencyCreateOrConnectWithoutTaskInput | Prisma.TaskDependencyCreateOrConnectWithoutTaskInput[]
  upsert?: Prisma.TaskDependencyUpsertWithWhereUniqueWithoutTaskInput | Prisma.TaskDependencyUpsertWithWhereUniqueWithoutTaskInput[]
  createMany?: Prisma.TaskDependencyCreateManyTaskInputEnvelope
  set?: Prisma.TaskDependencyWhereUniqueInput | Prisma.TaskDependencyWhereUniqueInput[]
  disconnect?: Prisma.TaskDependencyWhereUniqueInput | Prisma.TaskDependencyWhereUniqueInput[]
  delete?: Prisma.TaskDependencyWhereUniqueInput | Prisma.TaskDependencyWhereUniqueInput[]
  connect?: Prisma.TaskDependencyWhereUniqueInput | Prisma.TaskDependencyWhereUniqueInput[]
  update?: Prisma.TaskDependencyUpdateWithWhereUniqueWithoutTaskInput | Prisma.TaskDependencyUpdateWithWhereUniqueWithoutTaskInput[]
  updateMany?: Prisma.TaskDependencyUpdateManyWithWhereWithoutTaskInput | Prisma.TaskDependencyUpdateManyWithWhereWithoutTaskInput[]
  deleteMany?: Prisma.TaskDependencyScalarWhereInput | Prisma.TaskDependencyScalarWhereInput[]
}

export type TaskDependencyCreateWithoutDependsOnTaskInput = {
  id?: string
  createdAt?: Date | string
  task: Prisma.TaskCreateNestedOneWithoutDependenciesInput
}

export type TaskDependencyUncheckedCreateWithoutDependsOnTaskInput = {
  id?: string
  taskId: string
  createdAt?: Date | string
}

export type TaskDependencyCreateOrConnectWithoutDependsOnTaskInput = {
  where: Prisma.TaskDependencyWhereUniqueInput
  create: Prisma.XOR<Prisma.TaskDependencyCreateWithoutDependsOnTaskInput, Prisma.TaskDependencyUncheckedCreateWithoutDependsOnTaskInput>
}

export type TaskDependencyCreateManyDependsOnTaskInputEnvelope = {
  data: Prisma.TaskDependencyCreateManyDependsOnTaskInput | Prisma.TaskDependencyCreateManyDependsOnTaskInput[]
  skipDuplicates?: boolean
}

export type TaskDependencyCreateWithoutTaskInput = {
  id?: string
  createdAt?: Date | string
  dependsOnTask: Prisma.TaskCreateNestedOneWithoutDependentTasksInput
}

export type TaskDependencyUncheckedCreateWithoutTaskInput = {
  id?: string
  dependsOnTaskId: string
  createdAt?: Date | string
}

export type TaskDependencyCreateOrConnectWithoutTaskInput = {
  where: Prisma.TaskDependencyWhereUniqueInput
  create: Prisma.XOR<Prisma.TaskDependencyCreateWithoutTaskInput, Prisma.TaskDependencyUncheckedCreateWithoutTaskInput>
}

export type TaskDependencyCreateManyTaskInputEnvelope = {
  data: Prisma.TaskDependencyCreateManyTaskInput | Prisma.TaskDependencyCreateManyTaskInput[]
  skipDuplicates?: boolean
}

export type TaskDependencyUpsertWithWhereUniqueWithoutDependsOnTaskInput = {
  where: Prisma.TaskDependencyWhereUniqueInput
  update: Prisma.XOR<Prisma.TaskDependencyUpdateWithoutDependsOnTaskInput, Prisma.TaskDependencyUncheckedUpdateWithoutDependsOnTaskInput>
  create: Prisma.XOR<Prisma.TaskDependencyCreateWithoutDependsOnTaskInput, Prisma.TaskDependencyUncheckedCreateWithoutDependsOnTaskInput>
}

export type TaskDependencyUpdateWithWhereUniqueWithoutDependsOnTaskInput = {
  where: Prisma.TaskDependencyWhereUniqueInput
  data: Prisma.XOR<Prisma.TaskDependencyUpdateWithoutDependsOnTaskInput, Prisma.TaskDependencyUncheckedUpdateWithoutDependsOnTaskInput>
}

export type TaskDependencyUpdateManyWithWhereWithoutDependsOnTaskInput = {
  where: Prisma.TaskDependencyScalarWhereInput
  data: Prisma.XOR<Prisma.TaskDependencyUpdateManyMutationInput, Prisma.TaskDependencyUncheckedUpdateManyWithoutDependsOnTaskInput>
}

export type TaskDependencyScalarWhereInput = {
  AND?: Prisma.TaskDependencyScalarWhereInput | Prisma.TaskDependencyScalarWhereInput[]
  OR?: Prisma.TaskDependencyScalarWhereInput[]
  NOT?: Prisma.TaskDependencyScalarWhereInput | Prisma.TaskDependencyScalarWhereInput[]
  id?: Prisma.StringFilter<"TaskDependency"> | string
  taskId?: Prisma.StringFilter<"TaskDependency"> | string
  dependsOnTaskId?: Prisma.StringFilter<"TaskDependency"> | string
  createdAt?: Prisma.DateTimeFilter<"TaskDependency"> | Date | string
}

export type TaskDependencyUpsertWithWhereUniqueWithoutTaskInput = {
  where: Prisma.TaskDependencyWhereUniqueInput
  update: Prisma.XOR<Prisma.TaskDependencyUpdateWithoutTaskInput, Prisma.TaskDependencyUncheckedUpdateWithoutTaskInput>
  create: Prisma.XOR<Prisma.TaskDependencyCreateWithoutTaskInput, Prisma.TaskDependencyUncheckedCreateWithoutTaskInput>
}

export type TaskDependencyUpdateWithWhereUniqueWithoutTaskInput = {
  where: Prisma.TaskDependencyWhereUniqueInput
  data: Prisma.XOR<Prisma.TaskDependencyUpdateWithoutTaskInput, Prisma.TaskDependencyUncheckedUpdateWithoutTaskInput>
}

export type TaskDependencyUpdateManyWithWhereWithoutTaskInput = {
  where: Prisma.TaskDependencyScalarWhereInput
  data: Prisma.XOR<Prisma.TaskDependencyUpdateManyMutationInput, Prisma.TaskDependencyUncheckedUpdateManyWithoutTaskInput>
}

export type TaskDependencyCreateManyDependsOnTaskInput = {
  id?: string
  taskId: string
  createdAt?: Date | string
}

export type TaskDependencyCreateManyTaskInput = {
  id?: string
  dependsOnTaskId: string
  createdAt?: Date | string
}

export type TaskDependencyUpdateWithoutDependsOnTaskInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  task?: Prisma.TaskUpdateOneRequiredWithoutDependenciesNestedInput
}

export type TaskDependencyUncheckedUpdateWithoutDependsOnTaskInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  taskId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TaskDependencyUncheckedUpdateManyWithoutDependsOnTaskInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  taskId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TaskDependencyUpdateWithoutTaskInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dependsOnTask?: Prisma.TaskUpdateOneRequiredWithoutDependentTasksNestedInput
}

export type TaskDependencyUncheckedUpdateWithoutTaskInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dependsOnTaskId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TaskDependencyUncheckedUpdateManyWithoutTaskInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dependsOnTaskId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type TaskDependencySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  taskId?: boolean
  dependsOnTaskId?: boolean
  createdAt?: boolean
  dependsOnTask?: boolean | Prisma.TaskDefaultArgs<ExtArgs>
  task?: boolean | Prisma.TaskDefaultArgs<ExtArgs>
}, ExtArgs["result"]["taskDependency"]>

export type TaskDependencySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  taskId?: boolean
  dependsOnTaskId?: boolean
  createdAt?: boolean
  dependsOnTask?: boolean | Prisma.TaskDefaultArgs<ExtArgs>
  task?: boolean | Prisma.TaskDefaultArgs<ExtArgs>
}, ExtArgs["result"]["taskDependency"]>

export type TaskDependencySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  taskId?: boolean
  dependsOnTaskId?: boolean
  createdAt?: boolean
  dependsOnTask?: boolean | Prisma.TaskDefaultArgs<ExtArgs>
  task?: boolean | Prisma.TaskDefaultArgs<ExtArgs>
}, ExtArgs["result"]["taskDependency"]>

export type TaskDependencySelectScalar = {
  id?: boolean
  taskId?: boolean
  dependsOnTaskId?: boolean
  createdAt?: boolean
}

export type TaskDependencyOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "taskId" | "dependsOnTaskId" | "createdAt", ExtArgs["result"]["taskDependency"]>
export type TaskDependencyInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dependsOnTask?: boolean | Prisma.TaskDefaultArgs<ExtArgs>
  task?: boolean | Prisma.TaskDefaultArgs<ExtArgs>
}
export type TaskDependencyIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dependsOnTask?: boolean | Prisma.TaskDefaultArgs<ExtArgs>
  task?: boolean | Prisma.TaskDefaultArgs<ExtArgs>
}
export type TaskDependencyIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dependsOnTask?: boolean | Prisma.TaskDefaultArgs<ExtArgs>
  task?: boolean | Prisma.TaskDefaultArgs<ExtArgs>
}

export type $TaskDependencyPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TaskDependency"
  objects: {
    dependsOnTask: Prisma.$TaskPayload<ExtArgs>
    task: Prisma.$TaskPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    taskId: string
    dependsOnTaskId: string
    createdAt: Date
  }, ExtArgs["result"]["taskDependency"]>
  composites: {}
}

export type TaskDependencyGetPayload<S extends boolean | null | undefined | TaskDependencyDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TaskDependencyPayload, S>

export type TaskDependencyCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TaskDependencyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TaskDependencyCountAggregateInputType | true
  }

export interface TaskDependencyDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TaskDependency'], meta: { name: 'TaskDependency' } }
  /**
   * Find zero or one TaskDependency that matches the filter.
   * @param {TaskDependencyFindUniqueArgs} args - Arguments to find a TaskDependency
   * @example
   * // Get one TaskDependency
   * const taskDependency = await prisma.taskDependency.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TaskDependencyFindUniqueArgs>(args: Prisma.SelectSubset<T, TaskDependencyFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TaskDependencyClient<runtime.Types.Result.GetResult<Prisma.$TaskDependencyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TaskDependency that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TaskDependencyFindUniqueOrThrowArgs} args - Arguments to find a TaskDependency
   * @example
   * // Get one TaskDependency
   * const taskDependency = await prisma.taskDependency.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TaskDependencyFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TaskDependencyFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TaskDependencyClient<runtime.Types.Result.GetResult<Prisma.$TaskDependencyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TaskDependency that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TaskDependencyFindFirstArgs} args - Arguments to find a TaskDependency
   * @example
   * // Get one TaskDependency
   * const taskDependency = await prisma.taskDependency.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TaskDependencyFindFirstArgs>(args?: Prisma.SelectSubset<T, TaskDependencyFindFirstArgs<ExtArgs>>): Prisma.Prisma__TaskDependencyClient<runtime.Types.Result.GetResult<Prisma.$TaskDependencyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TaskDependency that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TaskDependencyFindFirstOrThrowArgs} args - Arguments to find a TaskDependency
   * @example
   * // Get one TaskDependency
   * const taskDependency = await prisma.taskDependency.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TaskDependencyFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TaskDependencyFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TaskDependencyClient<runtime.Types.Result.GetResult<Prisma.$TaskDependencyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TaskDependencies that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TaskDependencyFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TaskDependencies
   * const taskDependencies = await prisma.taskDependency.findMany()
   * 
   * // Get first 10 TaskDependencies
   * const taskDependencies = await prisma.taskDependency.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const taskDependencyWithIdOnly = await prisma.taskDependency.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TaskDependencyFindManyArgs>(args?: Prisma.SelectSubset<T, TaskDependencyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TaskDependencyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TaskDependency.
   * @param {TaskDependencyCreateArgs} args - Arguments to create a TaskDependency.
   * @example
   * // Create one TaskDependency
   * const TaskDependency = await prisma.taskDependency.create({
   *   data: {
   *     // ... data to create a TaskDependency
   *   }
   * })
   * 
   */
  create<T extends TaskDependencyCreateArgs>(args: Prisma.SelectSubset<T, TaskDependencyCreateArgs<ExtArgs>>): Prisma.Prisma__TaskDependencyClient<runtime.Types.Result.GetResult<Prisma.$TaskDependencyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TaskDependencies.
   * @param {TaskDependencyCreateManyArgs} args - Arguments to create many TaskDependencies.
   * @example
   * // Create many TaskDependencies
   * const taskDependency = await prisma.taskDependency.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TaskDependencyCreateManyArgs>(args?: Prisma.SelectSubset<T, TaskDependencyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TaskDependencies and returns the data saved in the database.
   * @param {TaskDependencyCreateManyAndReturnArgs} args - Arguments to create many TaskDependencies.
   * @example
   * // Create many TaskDependencies
   * const taskDependency = await prisma.taskDependency.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TaskDependencies and only return the `id`
   * const taskDependencyWithIdOnly = await prisma.taskDependency.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TaskDependencyCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TaskDependencyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TaskDependencyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TaskDependency.
   * @param {TaskDependencyDeleteArgs} args - Arguments to delete one TaskDependency.
   * @example
   * // Delete one TaskDependency
   * const TaskDependency = await prisma.taskDependency.delete({
   *   where: {
   *     // ... filter to delete one TaskDependency
   *   }
   * })
   * 
   */
  delete<T extends TaskDependencyDeleteArgs>(args: Prisma.SelectSubset<T, TaskDependencyDeleteArgs<ExtArgs>>): Prisma.Prisma__TaskDependencyClient<runtime.Types.Result.GetResult<Prisma.$TaskDependencyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TaskDependency.
   * @param {TaskDependencyUpdateArgs} args - Arguments to update one TaskDependency.
   * @example
   * // Update one TaskDependency
   * const taskDependency = await prisma.taskDependency.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TaskDependencyUpdateArgs>(args: Prisma.SelectSubset<T, TaskDependencyUpdateArgs<ExtArgs>>): Prisma.Prisma__TaskDependencyClient<runtime.Types.Result.GetResult<Prisma.$TaskDependencyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TaskDependencies.
   * @param {TaskDependencyDeleteManyArgs} args - Arguments to filter TaskDependencies to delete.
   * @example
   * // Delete a few TaskDependencies
   * const { count } = await prisma.taskDependency.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TaskDependencyDeleteManyArgs>(args?: Prisma.SelectSubset<T, TaskDependencyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TaskDependencies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TaskDependencyUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TaskDependencies
   * const taskDependency = await prisma.taskDependency.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TaskDependencyUpdateManyArgs>(args: Prisma.SelectSubset<T, TaskDependencyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TaskDependencies and returns the data updated in the database.
   * @param {TaskDependencyUpdateManyAndReturnArgs} args - Arguments to update many TaskDependencies.
   * @example
   * // Update many TaskDependencies
   * const taskDependency = await prisma.taskDependency.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TaskDependencies and only return the `id`
   * const taskDependencyWithIdOnly = await prisma.taskDependency.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TaskDependencyUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TaskDependencyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TaskDependencyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TaskDependency.
   * @param {TaskDependencyUpsertArgs} args - Arguments to update or create a TaskDependency.
   * @example
   * // Update or create a TaskDependency
   * const taskDependency = await prisma.taskDependency.upsert({
   *   create: {
   *     // ... data to create a TaskDependency
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TaskDependency we want to update
   *   }
   * })
   */
  upsert<T extends TaskDependencyUpsertArgs>(args: Prisma.SelectSubset<T, TaskDependencyUpsertArgs<ExtArgs>>): Prisma.Prisma__TaskDependencyClient<runtime.Types.Result.GetResult<Prisma.$TaskDependencyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TaskDependencies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TaskDependencyCountArgs} args - Arguments to filter TaskDependencies to count.
   * @example
   * // Count the number of TaskDependencies
   * const count = await prisma.taskDependency.count({
   *   where: {
   *     // ... the filter for the TaskDependencies we want to count
   *   }
   * })
  **/
  count<T extends TaskDependencyCountArgs>(
    args?: Prisma.Subset<T, TaskDependencyCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TaskDependencyCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TaskDependency.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TaskDependencyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TaskDependencyAggregateArgs>(args: Prisma.Subset<T, TaskDependencyAggregateArgs>): Prisma.PrismaPromise<GetTaskDependencyAggregateType<T>>

  /**
   * Group by TaskDependency.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TaskDependencyGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TaskDependencyGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TaskDependencyGroupByArgs['orderBy'] }
      : { orderBy?: TaskDependencyGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TaskDependencyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskDependencyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TaskDependency model
 */
readonly fields: TaskDependencyFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TaskDependency.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TaskDependencyClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  dependsOnTask<T extends Prisma.TaskDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TaskDefaultArgs<ExtArgs>>): Prisma.Prisma__TaskClient<runtime.Types.Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  task<T extends Prisma.TaskDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TaskDefaultArgs<ExtArgs>>): Prisma.Prisma__TaskClient<runtime.Types.Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TaskDependency model
 */
export interface TaskDependencyFieldRefs {
  readonly id: Prisma.FieldRef<"TaskDependency", 'String'>
  readonly taskId: Prisma.FieldRef<"TaskDependency", 'String'>
  readonly dependsOnTaskId: Prisma.FieldRef<"TaskDependency", 'String'>
  readonly createdAt: Prisma.FieldRef<"TaskDependency", 'DateTime'>
}
    

// Custom InputTypes
/**
 * TaskDependency findUnique
 */
export type TaskDependencyFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TaskDependency
   */
  select?: Prisma.TaskDependencySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TaskDependency
   */
  omit?: Prisma.TaskDependencyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskDependencyInclude<ExtArgs> | null
  /**
   * Filter, which TaskDependency to fetch.
   */
  where: Prisma.TaskDependencyWhereUniqueInput
}

/**
 * TaskDependency findUniqueOrThrow
 */
export type TaskDependencyFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TaskDependency
   */
  select?: Prisma.TaskDependencySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TaskDependency
   */
  omit?: Prisma.TaskDependencyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskDependencyInclude<ExtArgs> | null
  /**
   * Filter, which TaskDependency to fetch.
   */
  where: Prisma.TaskDependencyWhereUniqueInput
}

/**
 * TaskDependency findFirst
 */
export type TaskDependencyFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TaskDependency
   */
  select?: Prisma.TaskDependencySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TaskDependency
   */
  omit?: Prisma.TaskDependencyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskDependencyInclude<ExtArgs> | null
  /**
   * Filter, which TaskDependency to fetch.
   */
  where?: Prisma.TaskDependencyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TaskDependencies to fetch.
   */
  orderBy?: Prisma.TaskDependencyOrderByWithRelationInput | Prisma.TaskDependencyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TaskDependencies.
   */
  cursor?: Prisma.TaskDependencyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TaskDependencies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TaskDependencies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TaskDependencies.
   */
  distinct?: Prisma.TaskDependencyScalarFieldEnum | Prisma.TaskDependencyScalarFieldEnum[]
}

/**
 * TaskDependency findFirstOrThrow
 */
export type TaskDependencyFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TaskDependency
   */
  select?: Prisma.TaskDependencySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TaskDependency
   */
  omit?: Prisma.TaskDependencyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskDependencyInclude<ExtArgs> | null
  /**
   * Filter, which TaskDependency to fetch.
   */
  where?: Prisma.TaskDependencyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TaskDependencies to fetch.
   */
  orderBy?: Prisma.TaskDependencyOrderByWithRelationInput | Prisma.TaskDependencyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TaskDependencies.
   */
  cursor?: Prisma.TaskDependencyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TaskDependencies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TaskDependencies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TaskDependencies.
   */
  distinct?: Prisma.TaskDependencyScalarFieldEnum | Prisma.TaskDependencyScalarFieldEnum[]
}

/**
 * TaskDependency findMany
 */
export type TaskDependencyFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TaskDependency
   */
  select?: Prisma.TaskDependencySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TaskDependency
   */
  omit?: Prisma.TaskDependencyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskDependencyInclude<ExtArgs> | null
  /**
   * Filter, which TaskDependencies to fetch.
   */
  where?: Prisma.TaskDependencyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TaskDependencies to fetch.
   */
  orderBy?: Prisma.TaskDependencyOrderByWithRelationInput | Prisma.TaskDependencyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TaskDependencies.
   */
  cursor?: Prisma.TaskDependencyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TaskDependencies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TaskDependencies.
   */
  skip?: number
  distinct?: Prisma.TaskDependencyScalarFieldEnum | Prisma.TaskDependencyScalarFieldEnum[]
}

/**
 * TaskDependency create
 */
export type TaskDependencyCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TaskDependency
   */
  select?: Prisma.TaskDependencySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TaskDependency
   */
  omit?: Prisma.TaskDependencyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskDependencyInclude<ExtArgs> | null
  /**
   * The data needed to create a TaskDependency.
   */
  data: Prisma.XOR<Prisma.TaskDependencyCreateInput, Prisma.TaskDependencyUncheckedCreateInput>
}

/**
 * TaskDependency createMany
 */
export type TaskDependencyCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TaskDependencies.
   */
  data: Prisma.TaskDependencyCreateManyInput | Prisma.TaskDependencyCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TaskDependency createManyAndReturn
 */
export type TaskDependencyCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TaskDependency
   */
  select?: Prisma.TaskDependencySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TaskDependency
   */
  omit?: Prisma.TaskDependencyOmit<ExtArgs> | null
  /**
   * The data used to create many TaskDependencies.
   */
  data: Prisma.TaskDependencyCreateManyInput | Prisma.TaskDependencyCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskDependencyIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TaskDependency update
 */
export type TaskDependencyUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TaskDependency
   */
  select?: Prisma.TaskDependencySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TaskDependency
   */
  omit?: Prisma.TaskDependencyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskDependencyInclude<ExtArgs> | null
  /**
   * The data needed to update a TaskDependency.
   */
  data: Prisma.XOR<Prisma.TaskDependencyUpdateInput, Prisma.TaskDependencyUncheckedUpdateInput>
  /**
   * Choose, which TaskDependency to update.
   */
  where: Prisma.TaskDependencyWhereUniqueInput
}

/**
 * TaskDependency updateMany
 */
export type TaskDependencyUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TaskDependencies.
   */
  data: Prisma.XOR<Prisma.TaskDependencyUpdateManyMutationInput, Prisma.TaskDependencyUncheckedUpdateManyInput>
  /**
   * Filter which TaskDependencies to update
   */
  where?: Prisma.TaskDependencyWhereInput
  /**
   * Limit how many TaskDependencies to update.
   */
  limit?: number
}

/**
 * TaskDependency updateManyAndReturn
 */
export type TaskDependencyUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TaskDependency
   */
  select?: Prisma.TaskDependencySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TaskDependency
   */
  omit?: Prisma.TaskDependencyOmit<ExtArgs> | null
  /**
   * The data used to update TaskDependencies.
   */
  data: Prisma.XOR<Prisma.TaskDependencyUpdateManyMutationInput, Prisma.TaskDependencyUncheckedUpdateManyInput>
  /**
   * Filter which TaskDependencies to update
   */
  where?: Prisma.TaskDependencyWhereInput
  /**
   * Limit how many TaskDependencies to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskDependencyIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TaskDependency upsert
 */
export type TaskDependencyUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TaskDependency
   */
  select?: Prisma.TaskDependencySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TaskDependency
   */
  omit?: Prisma.TaskDependencyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskDependencyInclude<ExtArgs> | null
  /**
   * The filter to search for the TaskDependency to update in case it exists.
   */
  where: Prisma.TaskDependencyWhereUniqueInput
  /**
   * In case the TaskDependency found by the `where` argument doesn't exist, create a new TaskDependency with this data.
   */
  create: Prisma.XOR<Prisma.TaskDependencyCreateInput, Prisma.TaskDependencyUncheckedCreateInput>
  /**
   * In case the TaskDependency was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TaskDependencyUpdateInput, Prisma.TaskDependencyUncheckedUpdateInput>
}

/**
 * TaskDependency delete
 */
export type TaskDependencyDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TaskDependency
   */
  select?: Prisma.TaskDependencySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TaskDependency
   */
  omit?: Prisma.TaskDependencyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskDependencyInclude<ExtArgs> | null
  /**
   * Filter which TaskDependency to delete.
   */
  where: Prisma.TaskDependencyWhereUniqueInput
}

/**
 * TaskDependency deleteMany
 */
export type TaskDependencyDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TaskDependencies to delete
   */
  where?: Prisma.TaskDependencyWhereInput
  /**
   * Limit how many TaskDependencies to delete.
   */
  limit?: number
}

/**
 * TaskDependency without action
 */
export type TaskDependencyDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TaskDependency
   */
  select?: Prisma.TaskDependencySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TaskDependency
   */
  omit?: Prisma.TaskDependencyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskDependencyInclude<ExtArgs> | null
}
