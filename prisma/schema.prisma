generator client {
  provider      = "prisma-client"
  output        = "../generated/client"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "rhel-openssl-1.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model Account {
  id          String   @id @default(uuid())
  email       String   @unique
  firstName   String
  lastName    String
  password    String
  role        String
  accessLevel String
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model StaffInvitation {
  id          String    @id @default(uuid())
  email       String
  firstName   String
  lastName    String
  role        String
  accessLevel String
  token       String    @unique
  used        Boolean   @default(false)
  usedAt      DateTime?
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
}

model Event {
  id               String               @id @default(uuid())
  title            String
  description      String?
  location         String
  startDate        DateTime
  startTime        String
  endDate          DateTime?
  endTime          String?
  customerId       String?
  status           String               @default("quote_requested")
  stage            String               @default("pending_review")
  staffNotes       String?
  customerNotes    String?
  totalAmount      Float?
  depositAmount    Float?
  depositPaid      Boolean              @default(false)
  finalPaymentPaid Boolean              @default(false)
  assignedStaffId  String?
  reviewedBy       String?
  reviewedAt       DateTime?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  customer         Customer?            @relation(fields: [customerId], references: [id])
  items            EventItem[]
  statusHistory    EventStatusHistory[]
  tasks            Task[]
}

model EventItem {
  id              String            @id @default(uuid())
  eventId         String
  productId       String
  quantity        Int               @default(1)
  unitPrice       Float?
  totalPrice      Float?
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  event           Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  product         Product           @relation(fields: [productId], references: [id])
  selectedOptions EventItemOption[]
}

model EventItemOption {
  id              String        @id @default(uuid())
  eventItemId     String
  optionId        String
  optionName      String
  value           String
  label           String?
  priceAdjustment Float         @default(0)
  createdAt       DateTime      @default(now())
  eventItem       EventItem     @relation(fields: [eventItemId], references: [id], onDelete: Cascade)
  option          ProductOption @relation(fields: [optionId], references: [id])
}

model EventStatusHistory {
  id         String   @id @default(uuid())
  eventId    String
  fromStatus String?
  toStatus   String
  fromStage  String?
  toStage    String
  notes      String?
  changedBy  String?
  changedAt  DateTime @default(now())
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Customer {
  id        String   @id @default(uuid())
  email     String   @unique
  firstName String
  lastName  String
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]
  orders    Order[]
}

model Product {
  id            String           @id @default(uuid())
  name          String
  description   String?
  price         Float
  hasRangePrice Boolean          @default(false)
  minPrice      Float?
  maxPrice      Float?
  hasUnitPrice  Boolean          @default(false)
  unitPrice     Float?
  unitType      String?
  minQuantity   Int?
  imageUrl      String?
  active        Boolean          @default(true)
  canBuy        Boolean          @default(true)
  canHire       Boolean          @default(false)
  categoryId    String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  eventItems    EventItem[]
  orderItems    OrderItem[]
  category      ProductCategory? @relation(fields: [categoryId], references: [id])
  options       ProductOption[]
  taskTemplates TaskTemplate[]
  tasks         Task[]
}

model Order {
  id              String               @id @default(uuid())
  orderNumber     String               @unique
  customerId      String
  status          String               @default("pending")
  stage           String               @default("pending_review")
  totalAmount     Float
  shippingAmount  Float?               @default(0)
  taxAmount       Float?               @default(0)
  discountAmount  Float?               @default(0)
  finalAmount     Float
  paymentStatus   String               @default("unpaid")
  shippingAddress Json?
  billingAddress  Json?
  staffNotes      String?
  customerNotes   String?
  assignedStaffId String?
  reviewedBy      String?
  reviewedAt      DateTime?
  shippedAt       DateTime?
  deliveredAt     DateTime?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  customer        Customer             @relation(fields: [customerId], references: [id])
  items           OrderItem[]
  statusHistory   OrderStatusHistory[]
  tasks           Task[]
}

model OrderItem {
  id              String            @id @default(uuid())
  orderId         String
  productId       String
  quantity        Int               @default(1)
  unitPrice       Float
  totalPrice      Float
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  order           Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product         Product           @relation(fields: [productId], references: [id])
  selectedOptions OrderItemOption[]
}

model OrderItemOption {
  id              String        @id @default(uuid())
  orderItemId     String
  optionId        String
  optionName      String
  value           String
  label           String?
  priceAdjustment Float         @default(0)
  createdAt       DateTime      @default(now())
  option          ProductOption @relation(fields: [optionId], references: [id])
  orderItem       OrderItem     @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
}

model OrderStatusHistory {
  id         String   @id @default(uuid())
  orderId    String
  fromStatus String?
  toStatus   String
  fromStage  String?
  toStage    String
  notes      String?
  changedBy  String?
  changedAt  DateTime @default(now())
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model HeroSetting {
  id           String   @id @default(uuid())
  imageUrl     String
  title        String
  description  String
  buttonText   String   @default("Learn More")
  buttonLink   String   @default("/contact")
  textPosition String   @default("left")
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model ProductCategory {
  id          String    @id @default(uuid())
  name        String
  description String?
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model ProductOption {
  id               String               @id @default(uuid())
  productId        String
  name             String
  type             String
  required         Boolean              @default(false)
  sortOrder        Int                  @default(0)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  eventItemOptions EventItemOption[]
  orderItemOptions OrderItemOption[]
  product          Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  values           ProductOptionValue[]
}

model ProductOptionValue {
  id              String        @id @default(uuid())
  optionId        String
  value           String
  label           String?
  priceAdjustment Float?        @default(0)
  sortOrder       Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  option          ProductOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
}

model TaskTemplate {
  id                           String               @id @default(cuid())
  productId                    String
  name                         String
  description                  String?
  category                     String?
  estimatedDuration            Int
  leadTimeHours                Int                  @default(0)
  sequenceOrder                Int                  @default(0)
  requiredRole                 String?
  triggerCondition             TaskTriggerCondition
  isMandatory                  Boolean              @default(true)
  requiresCompletionBeforeNext Boolean              @default(false)
  autoAssignToRole             String?
  notes                        String?
  isActive                     Boolean              @default(true)
  createdAt                    DateTime             @default(now())
  updatedAt                    DateTime             @updatedAt
  product                      Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  tasks                        Task[]

  @@map("task_templates")
}

model Task {
  id                       String           @id @default(cuid())
  templateId               String?
  eventId                  String?
  orderId                  String?
  productId                String?
  assignedUserId           String?
  name                     String
  description              String?
  category                 String?
  status                   TaskStatus       @default(PENDING)
  priority                 TaskPriority     @default(MEDIUM)
  dueDate                  DateTime?
  startTime                DateTime?
  endTime                  DateTime?
  estimatedDuration        Int?
  actualDuration           Int?
  actualStartTime          DateTime?
  actualEndTime            DateTime?
  completionNotes          String?
  requiresCustomerApproval Boolean          @default(false)
  customerApprovedAt       DateTime?
  blockedReason            String?
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
  dependentTasks           TaskDependency[] @relation("DependentTasks")
  dependencies             TaskDependency[] @relation("TaskDependencies")
  assignedUser             User?            @relation(fields: [assignedUserId], references: [id])
  event                    Event?           @relation(fields: [eventId], references: [id])
  order                    Order?           @relation(fields: [orderId], references: [id])
  product                  Product?         @relation(fields: [productId], references: [id])
  template                 TaskTemplate?    @relation(fields: [templateId], references: [id])

  @@map("tasks")
}

model TaskDependency {
  id              String   @id @default(cuid())
  taskId          String
  dependsOnTaskId String
  createdAt       DateTime @default(now())
  dependsOnTask   Task     @relation("DependentTasks", fields: [dependsOnTaskId], references: [id], onDelete: Cascade)
  task            Task     @relation("TaskDependencies", fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_dependencies")
}

model UserRole {
  id         String   @id @default(cuid())
  userId     String
  role       String
  department String?
  isPrimary  Boolean  @default(false)
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_roles")
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  firstName     String
  lastName      String
  password      String
  role          String     @default("admin")
  department    String?
  active        Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  assignedTasks Task[]
  userRoles     UserRole[]
}

enum TaskTriggerCondition {
  ORDER_CREATED
  ORDER_CONFIRMED
  EVENT_CONFIRMED
  EVENT_PAID
  DAY_BEFORE
  DAY_OF
  AFTER_EVENT
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  BLOCKED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
